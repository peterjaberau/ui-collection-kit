{
  "openapi": "3.1.1",
  "info": {
    "title": "Twenty Api",
    "description": "This is a **Twenty REST/API** playground based on the **OpenAPI 3.1 specification**.",
    "termsOfService": "https://github.com/twentyhq/twenty?tab=coc-ov-file#readme",
    "contact": { "email": "felix@twenty.com" },
    "license": { "name": "AGPL-3.0", "url": "https://github.com/twentyhq/twenty?tab=License-1-ov-file#readme" },
    "version": "v0.1"
  },
  "servers": [{ "url": "http://localhost:3000/rest/", "description": "Production Development" }],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\"."
      }
    },
    "schemas": {
      "ApiKey": {
        "type": "object",
        "description": "An API key",
        "properties": {
          "name": { "type": "string", "description": "ApiKey name" },
          "expiresAt": { "type": "string", "format": "date-time", "description": "ApiKey expiration date" },
          "revokedAt": { "type": "string", "format": "date-time", "description": "ApiKey revocation date" }
        },
        "required": ["expiresAt"]
      },
      "ApiKey for Update": {
        "type": "object",
        "description": "An API key",
        "properties": {
          "name": { "type": "string", "description": "ApiKey name" },
          "expiresAt": { "type": "string", "format": "date-time", "description": "ApiKey expiration date" },
          "revokedAt": { "type": "string", "format": "date-time", "description": "ApiKey revocation date" }
        }
      },
      "ApiKey for Response": {
        "type": "object",
        "description": "An API key",
        "properties": {
          "name": { "type": "string", "description": "ApiKey name" },
          "expiresAt": { "type": "string", "format": "date-time", "description": "ApiKey expiration date" },
          "revokedAt": { "type": "string", "format": "date-time", "description": "ApiKey revocation date" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" }
        }
      },
      "Attachment": {
        "type": "object",
        "description": "An attachment",
        "properties": {
          "name": { "type": "string", "description": "Attachment name" },
          "fullPath": { "type": "string", "description": "Attachment full path" },
          "type": { "type": "string", "description": "Attachment type" }
        }
      },
      "Attachment for Update": {
        "type": "object",
        "description": "An attachment",
        "properties": {
          "name": { "type": "string", "description": "Attachment name" },
          "fullPath": { "type": "string", "description": "Attachment full path" },
          "type": { "type": "string", "description": "Attachment type" }
        }
      },
      "Attachment for Response": {
        "type": "object",
        "description": "An attachment",
        "properties": {
          "name": { "type": "string", "description": "Attachment name" },
          "fullPath": { "type": "string", "description": "Attachment full path" },
          "type": { "type": "string", "description": "Attachment type" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "author": { "description": "Attachment author" },
          "task": { "description": "Attachment task" },
          "note": { "description": "Attachment note" },
          "person": { "description": "Attachment person" },
          "company": { "description": "Attachment company" },
          "opportunity": { "description": "Attachment opportunity" },
          "pet": { "description": "Attachments Pet" },
          "surveyResult": { "description": "Attachments Survey result" }
        }
      },
      "Blocklist": {
        "type": "object",
        "description": "Blocklist",
        "properties": { "handle": { "type": "string", "description": "Handle" } }
      },
      "Blocklist for Update": {
        "type": "object",
        "description": "Blocklist",
        "properties": { "handle": { "type": "string", "description": "Handle" } }
      },
      "Blocklist for Response": {
        "type": "object",
        "description": "Blocklist",
        "properties": {
          "handle": { "type": "string", "description": "Handle" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "workspaceMember": { "description": "WorkspaceMember" }
        }
      },
      "CalendarEvent": {
        "type": "object",
        "description": "Calendar events",
        "properties": {
          "title": { "type": "string", "description": "Title" },
          "isCanceled": { "type": "boolean", "description": "Is canceled" },
          "isFullDay": { "type": "boolean", "description": "Is Full Day" },
          "startsAt": { "type": "string", "format": "date-time", "description": "Start Date" },
          "endsAt": { "type": "string", "format": "date-time", "description": "End Date" },
          "externalCreatedAt": { "type": "string", "format": "date-time", "description": "Creation DateTime" },
          "externalUpdatedAt": { "type": "string", "format": "date-time", "description": "Update DateTime" },
          "description": { "type": "string", "description": "Description" },
          "location": { "type": "string", "description": "Location" },
          "iCalUID": { "type": "string", "description": "iCal UID" },
          "conferenceSolution": { "type": "string", "description": "Conference Solution" },
          "conferenceLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Meet Link"
          }
        }
      },
      "CalendarEvent for Update": {
        "type": "object",
        "description": "Calendar events",
        "properties": {
          "title": { "type": "string", "description": "Title" },
          "isCanceled": { "type": "boolean", "description": "Is canceled" },
          "isFullDay": { "type": "boolean", "description": "Is Full Day" },
          "startsAt": { "type": "string", "format": "date-time", "description": "Start Date" },
          "endsAt": { "type": "string", "format": "date-time", "description": "End Date" },
          "externalCreatedAt": { "type": "string", "format": "date-time", "description": "Creation DateTime" },
          "externalUpdatedAt": { "type": "string", "format": "date-time", "description": "Update DateTime" },
          "description": { "type": "string", "description": "Description" },
          "location": { "type": "string", "description": "Location" },
          "iCalUID": { "type": "string", "description": "iCal UID" },
          "conferenceSolution": { "type": "string", "description": "Conference Solution" },
          "conferenceLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Meet Link"
          }
        }
      },
      "CalendarEvent for Response": {
        "type": "object",
        "description": "Calendar events",
        "properties": {
          "title": { "type": "string", "description": "Title" },
          "isCanceled": { "type": "boolean", "description": "Is canceled" },
          "isFullDay": { "type": "boolean", "description": "Is Full Day" },
          "startsAt": { "type": "string", "format": "date-time", "description": "Start Date" },
          "endsAt": { "type": "string", "format": "date-time", "description": "End Date" },
          "externalCreatedAt": { "type": "string", "format": "date-time", "description": "Creation DateTime" },
          "externalUpdatedAt": { "type": "string", "format": "date-time", "description": "Update DateTime" },
          "description": { "type": "string", "description": "Description" },
          "location": { "type": "string", "description": "Location" },
          "iCalUID": { "type": "string", "description": "iCal UID" },
          "conferenceSolution": { "type": "string", "description": "Conference Solution" },
          "conferenceLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Meet Link"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "calendarChannelEventAssociations": { "description": "Calendar Channel Event Associations" },
          "calendarEventParticipants": { "description": "Event Participants" }
        }
      },
      "CalendarChannel": {
        "type": "object",
        "description": "Calendar Channels",
        "properties": {
          "handle": { "type": "string", "description": "Handle" },
          "syncStatus": {
            "type": "string",
            "enum": ["ONGOING", "NOT_SYNCED", "ACTIVE", "FAILED_INSUFFICIENT_PERMISSIONS", "FAILED_UNKNOWN"],
            "description": "Sync status"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "CALENDAR_EVENT_LIST_FETCH_ONGOING",
              "CALENDAR_EVENTS_IMPORT_PENDING",
              "CALENDAR_EVENTS_IMPORT_ONGOING",
              "FAILED"
            ],
            "description": "Sync stage"
          },
          "visibility": { "type": "string", "enum": ["METADATA", "SHARE_EVERYTHING"], "description": "Visibility" },
          "isContactAutoCreationEnabled": { "type": "boolean", "description": "Is Contact Auto Creation Enabled" },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": ["AS_PARTICIPANT_AND_ORGANIZER", "AS_PARTICIPANT", "AS_ORGANIZER", "NONE"],
            "description": "Automatically create records for people you participated with in an event."
          },
          "isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor. Used for syncing events from the calendar provider"
          },
          "syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
          "syncStageStartedAt": { "type": "string", "format": "date-time", "description": "Sync stage started at" },
          "throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" }
        }
      },
      "CalendarChannel for Update": {
        "type": "object",
        "description": "Calendar Channels",
        "properties": {
          "handle": { "type": "string", "description": "Handle" },
          "syncStatus": {
            "type": "string",
            "enum": ["ONGOING", "NOT_SYNCED", "ACTIVE", "FAILED_INSUFFICIENT_PERMISSIONS", "FAILED_UNKNOWN"],
            "description": "Sync status"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "CALENDAR_EVENT_LIST_FETCH_ONGOING",
              "CALENDAR_EVENTS_IMPORT_PENDING",
              "CALENDAR_EVENTS_IMPORT_ONGOING",
              "FAILED"
            ],
            "description": "Sync stage"
          },
          "visibility": { "type": "string", "enum": ["METADATA", "SHARE_EVERYTHING"], "description": "Visibility" },
          "isContactAutoCreationEnabled": { "type": "boolean", "description": "Is Contact Auto Creation Enabled" },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": ["AS_PARTICIPANT_AND_ORGANIZER", "AS_PARTICIPANT", "AS_ORGANIZER", "NONE"],
            "description": "Automatically create records for people you participated with in an event."
          },
          "isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor. Used for syncing events from the calendar provider"
          },
          "syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
          "syncStageStartedAt": { "type": "string", "format": "date-time", "description": "Sync stage started at" },
          "throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" }
        }
      },
      "CalendarChannel for Response": {
        "type": "object",
        "description": "Calendar Channels",
        "properties": {
          "handle": { "type": "string", "description": "Handle" },
          "syncStatus": {
            "type": "string",
            "enum": ["ONGOING", "NOT_SYNCED", "ACTIVE", "FAILED_INSUFFICIENT_PERMISSIONS", "FAILED_UNKNOWN"],
            "description": "Sync status"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "CALENDAR_EVENT_LIST_FETCH_ONGOING",
              "CALENDAR_EVENTS_IMPORT_PENDING",
              "CALENDAR_EVENTS_IMPORT_ONGOING",
              "FAILED"
            ],
            "description": "Sync stage"
          },
          "visibility": { "type": "string", "enum": ["METADATA", "SHARE_EVERYTHING"], "description": "Visibility" },
          "isContactAutoCreationEnabled": { "type": "boolean", "description": "Is Contact Auto Creation Enabled" },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": ["AS_PARTICIPANT_AND_ORGANIZER", "AS_PARTICIPANT", "AS_ORGANIZER", "NONE"],
            "description": "Automatically create records for people you participated with in an event."
          },
          "isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor. Used for syncing events from the calendar provider"
          },
          "syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
          "syncStageStartedAt": { "type": "string", "format": "date-time", "description": "Sync stage started at" },
          "throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "connectedAccount": { "description": "Connected Account" },
          "calendarChannelEventAssociations": { "description": "Calendar Channel Event Associations" }
        }
      },
      "CalendarChannelEventAssociation": {
        "type": "object",
        "description": "Calendar Channel Event Associations",
        "properties": {
          "eventExternalId": { "type": "string", "description": "Event external ID" },
          "recurringEventExternalId": { "type": "string", "description": "Recurring Event ID" }
        }
      },
      "CalendarChannelEventAssociation for Update": {
        "type": "object",
        "description": "Calendar Channel Event Associations",
        "properties": {
          "eventExternalId": { "type": "string", "description": "Event external ID" },
          "recurringEventExternalId": { "type": "string", "description": "Recurring Event ID" }
        }
      },
      "CalendarChannelEventAssociation for Response": {
        "type": "object",
        "description": "Calendar Channel Event Associations",
        "properties": {
          "eventExternalId": { "type": "string", "description": "Event external ID" },
          "recurringEventExternalId": { "type": "string", "description": "Recurring Event ID" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "calendarChannel": { "description": "Channel ID" },
          "calendarEvent": { "description": "Event ID" }
        }
      },
      "CalendarEventParticipant": {
        "type": "object",
        "description": "Calendar event participants",
        "properties": {
          "handle": { "type": "string", "description": "Handle" },
          "displayName": { "type": "string", "description": "Display Name" },
          "isOrganizer": { "type": "boolean", "description": "Is Organizer" },
          "responseStatus": {
            "type": "string",
            "enum": ["NEEDS_ACTION", "DECLINED", "TENTATIVE", "ACCEPTED"],
            "description": "Response Status"
          }
        }
      },
      "CalendarEventParticipant for Update": {
        "type": "object",
        "description": "Calendar event participants",
        "properties": {
          "handle": { "type": "string", "description": "Handle" },
          "displayName": { "type": "string", "description": "Display Name" },
          "isOrganizer": { "type": "boolean", "description": "Is Organizer" },
          "responseStatus": {
            "type": "string",
            "enum": ["NEEDS_ACTION", "DECLINED", "TENTATIVE", "ACCEPTED"],
            "description": "Response Status"
          }
        }
      },
      "CalendarEventParticipant for Response": {
        "type": "object",
        "description": "Calendar event participants",
        "properties": {
          "handle": { "type": "string", "description": "Handle" },
          "displayName": { "type": "string", "description": "Display Name" },
          "isOrganizer": { "type": "boolean", "description": "Is Organizer" },
          "responseStatus": {
            "type": "string",
            "enum": ["NEEDS_ACTION", "DECLINED", "TENTATIVE", "ACCEPTED"],
            "description": "Response Status"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "calendarEvent": { "description": "Event ID" },
          "person": { "description": "Person" },
          "workspaceMember": { "description": "Workspace Member" }
        }
      },
      "Company": {
        "type": "object",
        "description": "A company",
        "properties": {
          "name": { "type": "string", "description": "The company name" },
          "domainName": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company website URL. We use this url to fetch the company icon"
          },
          "employees": { "type": "integer", "description": "Number of employees in the company" },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company Twitter/X account"
          },
          "annualRecurringRevenue": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } },
            "description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressStreet1": { "type": "string" },
              "addressStreet2": { "type": "string" },
              "addressCity": { "type": "string" },
              "addressPostcode": { "type": "string" },
              "addressState": { "type": "string" },
              "addressCountry": { "type": "string" },
              "addressLat": { "type": "number" },
              "addressLng": { "type": "number" }
            },
            "description": "Address of the company"
          },
          "idealCustomerProfile": {
            "type": "boolean",
            "description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
          },
          "position": { "type": "number", "description": "Company record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "tagline": { "type": "string", "description": "Company's Tagline" },
          "introVideo": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Company's Intro Video"
          },
          "workPolicy": {
            "type": "array",
            "items": { "type": "string", "enum": ["ON_SITE", "HYBRID", "REMOTE_WORK"] },
            "description": "Company's Work Policy"
          },
          "visaSponsorship": { "type": "boolean", "description": "Company's Visa Sponsorship Policy" }
        }
      },
      "Company for Update": {
        "type": "object",
        "description": "A company",
        "properties": {
          "name": { "type": "string", "description": "The company name" },
          "domainName": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company website URL. We use this url to fetch the company icon"
          },
          "employees": { "type": "integer", "description": "Number of employees in the company" },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company Twitter/X account"
          },
          "annualRecurringRevenue": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } },
            "description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressStreet1": { "type": "string" },
              "addressStreet2": { "type": "string" },
              "addressCity": { "type": "string" },
              "addressPostcode": { "type": "string" },
              "addressState": { "type": "string" },
              "addressCountry": { "type": "string" },
              "addressLat": { "type": "number" },
              "addressLng": { "type": "number" }
            },
            "description": "Address of the company"
          },
          "idealCustomerProfile": {
            "type": "boolean",
            "description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
          },
          "position": { "type": "number", "description": "Company record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "tagline": { "type": "string", "description": "Company's Tagline" },
          "introVideo": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Company's Intro Video"
          },
          "workPolicy": {
            "type": "array",
            "items": { "type": "string", "enum": ["ON_SITE", "HYBRID", "REMOTE_WORK"] },
            "description": "Company's Work Policy"
          },
          "visaSponsorship": { "type": "boolean", "description": "Company's Visa Sponsorship Policy" }
        }
      },
      "Company for Response": {
        "type": "object",
        "description": "A company",
        "properties": {
          "name": { "type": "string", "description": "The company name" },
          "domainName": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company website URL. We use this url to fetch the company icon"
          },
          "employees": { "type": "integer", "description": "Number of employees in the company" },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "The company Twitter/X account"
          },
          "annualRecurringRevenue": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } },
            "description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressStreet1": { "type": "string" },
              "addressStreet2": { "type": "string" },
              "addressCity": { "type": "string" },
              "addressPostcode": { "type": "string" },
              "addressState": { "type": "string" },
              "addressCountry": { "type": "string" },
              "addressLat": { "type": "number" },
              "addressLng": { "type": "number" }
            },
            "description": "Address of the company"
          },
          "idealCustomerProfile": {
            "type": "boolean",
            "description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
          },
          "position": { "type": "number", "description": "Company record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "tagline": { "type": "string", "description": "Company's Tagline" },
          "introVideo": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Company's Intro Video"
          },
          "workPolicy": {
            "type": "array",
            "items": { "type": "string", "enum": ["ON_SITE", "HYBRID", "REMOTE_WORK"] },
            "description": "Company's Work Policy"
          },
          "visaSponsorship": { "type": "boolean", "description": "Company's Visa Sponsorship Policy" },
          "people": { "description": "People linked to the company." },
          "accountOwner": { "description": "Your team member responsible for managing the company account" },
          "taskTargets": { "description": "Tasks tied to the company" },
          "noteTargets": { "description": "Notes tied to the company" },
          "opportunities": { "description": "Opportunities linked to the company." },
          "favorites": { "description": "Favorites linked to the company" },
          "attachments": { "description": "Attachments linked to the company" },
          "timelineActivities": { "description": "Timeline Activities linked to the company" }
        }
      },
      "ConnectedAccount": {
        "type": "object",
        "description": "A connected account",
        "properties": {
          "handle": { "type": "string", "description": "The account handle (email, username, phone number, etc.)" },
          "provider": { "type": "string", "description": "The account provider" },
          "accessToken": { "type": "string", "description": "Messaging provider access token" },
          "refreshToken": { "type": "string", "description": "Messaging provider refresh token" },
          "lastSyncHistoryId": { "type": "string", "description": "Last sync history ID" },
          "authFailedAt": { "type": "string", "format": "date-time", "description": "Auth failed at" },
          "handleAliases": { "type": "string", "description": "Handle Aliases" },
          "scopes": { "type": "array", "items": { "type": "string" }, "description": "Scopes" }
        }
      },
      "ConnectedAccount for Update": {
        "type": "object",
        "description": "A connected account",
        "properties": {
          "handle": { "type": "string", "description": "The account handle (email, username, phone number, etc.)" },
          "provider": { "type": "string", "description": "The account provider" },
          "accessToken": { "type": "string", "description": "Messaging provider access token" },
          "refreshToken": { "type": "string", "description": "Messaging provider refresh token" },
          "lastSyncHistoryId": { "type": "string", "description": "Last sync history ID" },
          "authFailedAt": { "type": "string", "format": "date-time", "description": "Auth failed at" },
          "handleAliases": { "type": "string", "description": "Handle Aliases" },
          "scopes": { "type": "array", "items": { "type": "string" }, "description": "Scopes" }
        }
      },
      "ConnectedAccount for Response": {
        "type": "object",
        "description": "A connected account",
        "properties": {
          "handle": { "type": "string", "description": "The account handle (email, username, phone number, etc.)" },
          "provider": { "type": "string", "description": "The account provider" },
          "accessToken": { "type": "string", "description": "Messaging provider access token" },
          "refreshToken": { "type": "string", "description": "Messaging provider refresh token" },
          "lastSyncHistoryId": { "type": "string", "description": "Last sync history ID" },
          "authFailedAt": { "type": "string", "format": "date-time", "description": "Auth failed at" },
          "handleAliases": { "type": "string", "description": "Handle Aliases" },
          "scopes": { "type": "array", "items": { "type": "string" }, "description": "Scopes" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "accountOwner": { "description": "Account Owner" },
          "messageChannels": { "description": "Message Channels" },
          "calendarChannels": { "description": "Calendar Channels" }
        }
      },
      "Favorite": {
        "type": "object",
        "description": "A favorite that can be accessed from the left menu",
        "properties": { "position": { "type": "integer", "description": "Favorite position" } }
      },
      "Favorite for Update": {
        "type": "object",
        "description": "A favorite that can be accessed from the left menu",
        "properties": { "position": { "type": "integer", "description": "Favorite position" } }
      },
      "Favorite for Response": {
        "type": "object",
        "description": "A favorite that can be accessed from the left menu",
        "properties": {
          "position": { "type": "integer", "description": "Favorite position" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "note": { "description": "Favorite note" },
          "view": { "description": "Favorite view" },
          "forWorkspaceMember": { "description": "Favorite workspace member" },
          "person": { "description": "Favorite person" },
          "company": { "description": "Favorite company" },
          "favoriteFolder": { "description": "The folder this favorite belongs to" },
          "opportunity": { "description": "Favorite opportunity" },
          "workflow": { "description": "Favorite workflow" },
          "workflowVersion": { "description": "Favorite workflow version" },
          "workflowRun": { "description": "Favorite workflow run" },
          "task": { "description": "Favorite task" },
          "pet": { "description": "Favorites Pet" },
          "surveyResult": { "description": "Favorites Survey result" }
        }
      },
      "FavoriteFolder": {
        "type": "object",
        "description": "A Folder of favorites",
        "properties": {
          "position": { "type": "integer", "description": "Favorite folder position" },
          "name": { "type": "string", "description": "Name of the favorite folder" }
        }
      },
      "FavoriteFolder for Update": {
        "type": "object",
        "description": "A Folder of favorites",
        "properties": {
          "position": { "type": "integer", "description": "Favorite folder position" },
          "name": { "type": "string", "description": "Name of the favorite folder" }
        }
      },
      "FavoriteFolder for Response": {
        "type": "object",
        "description": "A Folder of favorites",
        "properties": {
          "position": { "type": "integer", "description": "Favorite folder position" },
          "name": { "type": "string", "description": "Name of the favorite folder" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "favorites": { "description": "Favorites in this folder" }
        }
      },
      "TimelineActivity": {
        "type": "object",
        "description": "Aggregated / filtered event to be displayed on the timeline",
        "properties": {
          "happensAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "name": { "type": "string", "description": "Event name" },
          "properties": { "type": "object", "description": "Json value for event details" },
          "linkedRecordCachedName": { "type": "string", "description": "Cached record name" },
          "linkedRecordId": { "type": "string", "format": "uuid", "description": "Linked Record id" },
          "linkedObjectMetadataId": { "type": "string", "format": "uuid", "description": "Linked Object Metadata Id" }
        }
      },
      "TimelineActivity for Update": {
        "type": "object",
        "description": "Aggregated / filtered event to be displayed on the timeline",
        "properties": {
          "happensAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "name": { "type": "string", "description": "Event name" },
          "properties": { "type": "object", "description": "Json value for event details" },
          "linkedRecordCachedName": { "type": "string", "description": "Cached record name" },
          "linkedRecordId": { "type": "string", "format": "uuid", "description": "Linked Record id" },
          "linkedObjectMetadataId": { "type": "string", "format": "uuid", "description": "Linked Object Metadata Id" }
        }
      },
      "TimelineActivity for Response": {
        "type": "object",
        "description": "Aggregated / filtered event to be displayed on the timeline",
        "properties": {
          "happensAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "name": { "type": "string", "description": "Event name" },
          "properties": { "type": "object", "description": "Json value for event details" },
          "linkedRecordCachedName": { "type": "string", "description": "Cached record name" },
          "linkedRecordId": { "type": "string", "format": "uuid", "description": "Linked Record id" },
          "linkedObjectMetadataId": { "type": "string", "format": "uuid", "description": "Linked Object Metadata Id" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "workspaceMember": { "description": "Event workspace member" },
          "person": { "description": "Event person" },
          "company": { "description": "Event company" },
          "opportunity": { "description": "Event opportunity" },
          "note": { "description": "Event note" },
          "task": { "description": "Event task" },
          "workflow": { "description": "Event workflow" },
          "workflowVersion": { "description": "Event workflow version" },
          "workflowRun": { "description": "Event workflow run" },
          "pet": { "description": "TimelineActivities Pet" },
          "surveyResult": { "description": "TimelineActivities Survey result" }
        }
      },
      "ViewField": {
        "type": "object",
        "description": "(System) View Fields",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Field target field" },
          "isVisible": { "type": "boolean", "description": "View Field visibility" },
          "size": { "type": "integer", "description": "View Field size" },
          "position": { "type": "integer", "description": "View Field position" },
          "aggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          }
        },
        "required": ["fieldMetadataId"]
      },
      "ViewField for Update": {
        "type": "object",
        "description": "(System) View Fields",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Field target field" },
          "isVisible": { "type": "boolean", "description": "View Field visibility" },
          "size": { "type": "integer", "description": "View Field size" },
          "position": { "type": "integer", "description": "View Field position" },
          "aggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          }
        }
      },
      "ViewField for Response": {
        "type": "object",
        "description": "(System) View Fields",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Field target field" },
          "isVisible": { "type": "boolean", "description": "View Field visibility" },
          "size": { "type": "integer", "description": "View Field size" },
          "position": { "type": "integer", "description": "View Field position" },
          "aggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "view": { "description": "View Field related view" }
        }
      },
      "ViewGroup": {
        "type": "object",
        "description": "(System) View Groups",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Group target field" },
          "isVisible": { "type": "boolean", "description": "View Group visibility" },
          "fieldValue": { "type": "string", "description": "Group by this field value" },
          "position": { "type": "integer", "description": "View Field position" }
        },
        "required": ["fieldMetadataId"]
      },
      "ViewGroup for Update": {
        "type": "object",
        "description": "(System) View Groups",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Group target field" },
          "isVisible": { "type": "boolean", "description": "View Group visibility" },
          "fieldValue": { "type": "string", "description": "Group by this field value" },
          "position": { "type": "integer", "description": "View Field position" }
        }
      },
      "ViewGroup for Response": {
        "type": "object",
        "description": "(System) View Groups",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Group target field" },
          "isVisible": { "type": "boolean", "description": "View Group visibility" },
          "fieldValue": { "type": "string", "description": "Group by this field value" },
          "position": { "type": "integer", "description": "View Field position" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "view": { "description": "View Group related view" }
        }
      },
      "ViewFilter": {
        "type": "object",
        "description": "(System) View Filters",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Filter target field" },
          "operand": { "type": "string", "description": "View Filter operand" },
          "value": { "type": "string", "description": "View Filter value" },
          "displayValue": { "type": "string", "description": "View Filter Display Value" },
          "viewFilterGroupId": { "type": "string", "format": "uuid", "description": "View Filter Group" },
          "positionInViewFilterGroup": { "type": "integer", "description": "Position in the view filter group" },
          "subFieldName": { "type": "string", "description": "Sub field name" }
        },
        "required": ["fieldMetadataId"]
      },
      "ViewFilter for Update": {
        "type": "object",
        "description": "(System) View Filters",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Filter target field" },
          "operand": { "type": "string", "description": "View Filter operand" },
          "value": { "type": "string", "description": "View Filter value" },
          "displayValue": { "type": "string", "description": "View Filter Display Value" },
          "viewFilterGroupId": { "type": "string", "format": "uuid", "description": "View Filter Group" },
          "positionInViewFilterGroup": { "type": "integer", "description": "Position in the view filter group" },
          "subFieldName": { "type": "string", "description": "Sub field name" }
        }
      },
      "ViewFilter for Response": {
        "type": "object",
        "description": "(System) View Filters",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Filter target field" },
          "operand": { "type": "string", "description": "View Filter operand" },
          "value": { "type": "string", "description": "View Filter value" },
          "displayValue": { "type": "string", "description": "View Filter Display Value" },
          "viewFilterGroupId": { "type": "string", "format": "uuid", "description": "View Filter Group" },
          "positionInViewFilterGroup": { "type": "integer", "description": "Position in the view filter group" },
          "subFieldName": { "type": "string", "description": "Sub field name" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "view": { "description": "View Filter related view" }
        }
      },
      "ViewFilterGroup": {
        "type": "object",
        "description": "(System) View Filter Groups",
        "properties": {
          "parentViewFilterGroupId": { "type": "string", "format": "uuid", "description": "Parent View Filter Group" },
          "logicalOperator": {
            "type": "string",
            "enum": ["AND", "OR", "NOT"],
            "description": "Logical operator for the filter group"
          },
          "positionInViewFilterGroup": { "type": "integer", "description": "Position in the parent view filter group" }
        }
      },
      "ViewFilterGroup for Update": {
        "type": "object",
        "description": "(System) View Filter Groups",
        "properties": {
          "parentViewFilterGroupId": { "type": "string", "format": "uuid", "description": "Parent View Filter Group" },
          "logicalOperator": {
            "type": "string",
            "enum": ["AND", "OR", "NOT"],
            "description": "Logical operator for the filter group"
          },
          "positionInViewFilterGroup": { "type": "integer", "description": "Position in the parent view filter group" }
        }
      },
      "ViewFilterGroup for Response": {
        "type": "object",
        "description": "(System) View Filter Groups",
        "properties": {
          "parentViewFilterGroupId": { "type": "string", "format": "uuid", "description": "Parent View Filter Group" },
          "logicalOperator": {
            "type": "string",
            "enum": ["AND", "OR", "NOT"],
            "description": "Logical operator for the filter group"
          },
          "positionInViewFilterGroup": { "type": "integer", "description": "Position in the parent view filter group" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "view": { "description": "View" }
        }
      },
      "ViewSort": {
        "type": "object",
        "description": "(System) View Sorts",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Sort target field" },
          "direction": { "type": "string", "description": "View Sort direction" }
        },
        "required": ["fieldMetadataId"]
      },
      "ViewSort for Update": {
        "type": "object",
        "description": "(System) View Sorts",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Sort target field" },
          "direction": { "type": "string", "description": "View Sort direction" }
        }
      },
      "ViewSort for Response": {
        "type": "object",
        "description": "(System) View Sorts",
        "properties": {
          "fieldMetadataId": { "type": "string", "format": "uuid", "description": "View Sort target field" },
          "direction": { "type": "string", "description": "View Sort direction" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "view": { "description": "View Sort related view" }
        }
      },
      "View": {
        "type": "object",
        "description": "(System) Views",
        "properties": {
          "name": { "type": "string", "description": "View name" },
          "objectMetadataId": { "type": "string", "format": "uuid", "description": "View target object" },
          "type": { "type": "string", "description": "View type" },
          "key": { "type": "string", "enum": ["INDEX"], "description": "View key" },
          "icon": { "type": "string", "description": "View icon" },
          "kanbanFieldMetadataId": { "type": "string", "description": "View Kanban column field" },
          "position": { "type": "number", "description": "View position" },
          "isCompact": { "type": "boolean", "description": "Describes if the view is in compact mode" },
          "openRecordIn": {
            "type": "string",
            "enum": ["SIDE_PANEL", "RECORD_PAGE"],
            "description": "Display the records in a side panel or in a record page"
          },
          "kanbanAggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "kanbanAggregateOperationFieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Field metadata used for aggregate operation"
          }
        },
        "required": ["objectMetadataId"]
      },
      "View for Update": {
        "type": "object",
        "description": "(System) Views",
        "properties": {
          "name": { "type": "string", "description": "View name" },
          "objectMetadataId": { "type": "string", "format": "uuid", "description": "View target object" },
          "type": { "type": "string", "description": "View type" },
          "key": { "type": "string", "enum": ["INDEX"], "description": "View key" },
          "icon": { "type": "string", "description": "View icon" },
          "kanbanFieldMetadataId": { "type": "string", "description": "View Kanban column field" },
          "position": { "type": "number", "description": "View position" },
          "isCompact": { "type": "boolean", "description": "Describes if the view is in compact mode" },
          "openRecordIn": {
            "type": "string",
            "enum": ["SIDE_PANEL", "RECORD_PAGE"],
            "description": "Display the records in a side panel or in a record page"
          },
          "kanbanAggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "kanbanAggregateOperationFieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Field metadata used for aggregate operation"
          }
        }
      },
      "View for Response": {
        "type": "object",
        "description": "(System) Views",
        "properties": {
          "name": { "type": "string", "description": "View name" },
          "objectMetadataId": { "type": "string", "format": "uuid", "description": "View target object" },
          "type": { "type": "string", "description": "View type" },
          "key": { "type": "string", "enum": ["INDEX"], "description": "View key" },
          "icon": { "type": "string", "description": "View icon" },
          "kanbanFieldMetadataId": { "type": "string", "description": "View Kanban column field" },
          "position": { "type": "number", "description": "View position" },
          "isCompact": { "type": "boolean", "description": "Describes if the view is in compact mode" },
          "openRecordIn": {
            "type": "string",
            "enum": ["SIDE_PANEL", "RECORD_PAGE"],
            "description": "Display the records in a side panel or in a record page"
          },
          "kanbanAggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "kanbanAggregateOperationFieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Field metadata used for aggregate operation"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "viewFields": { "description": "View Fields" },
          "viewGroups": { "description": "View Groups" },
          "viewFilters": { "description": "View Filters" },
          "viewFilterGroups": { "description": "View Filter Groups" },
          "viewSorts": { "description": "View Sorts" },
          "favorites": { "description": "Favorites linked to the view" }
        }
      },
      "Webhook": {
        "type": "object",
        "description": "A webhook",
        "properties": {
          "targetUrl": { "type": "string", "description": "Webhook target url" },
          "operations": { "type": "array", "items": { "type": "string" }, "description": "Webhook operations" },
          "description": { "type": "string" },
          "secret": {
            "type": "string",
            "description": "Optional secret used to compute the HMAC signature for webhook payloads. This secret is shared between Twenty and the webhook consumer to authenticate webhook requests."
          }
        }
      },
      "Webhook for Update": {
        "type": "object",
        "description": "A webhook",
        "properties": {
          "targetUrl": { "type": "string", "description": "Webhook target url" },
          "operations": { "type": "array", "items": { "type": "string" }, "description": "Webhook operations" },
          "description": { "type": "string" },
          "secret": {
            "type": "string",
            "description": "Optional secret used to compute the HMAC signature for webhook payloads. This secret is shared between Twenty and the webhook consumer to authenticate webhook requests."
          }
        }
      },
      "Webhook for Response": {
        "type": "object",
        "description": "A webhook",
        "properties": {
          "targetUrl": { "type": "string", "description": "Webhook target url" },
          "operations": { "type": "array", "items": { "type": "string" }, "description": "Webhook operations" },
          "description": { "type": "string" },
          "secret": {
            "type": "string",
            "description": "Optional secret used to compute the HMAC signature for webhook payloads. This secret is shared between Twenty and the webhook consumer to authenticate webhook requests."
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" }
        }
      },
      "Workflow": {
        "type": "object",
        "description": "A workflow",
        "properties": {
          "name": { "type": "string", "description": "The workflow name" },
          "lastPublishedVersionId": { "type": "string", "description": "The workflow last published version id" },
          "statuses": {
            "type": "array",
            "items": { "type": "string", "enum": ["DRAFT", "ACTIVE", "DEACTIVATED"] },
            "description": "The current statuses of the workflow versions"
          },
          "position": { "type": "number", "description": "Workflow record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Workflow for Update": {
        "type": "object",
        "description": "A workflow",
        "properties": {
          "name": { "type": "string", "description": "The workflow name" },
          "lastPublishedVersionId": { "type": "string", "description": "The workflow last published version id" },
          "statuses": {
            "type": "array",
            "items": { "type": "string", "enum": ["DRAFT", "ACTIVE", "DEACTIVATED"] },
            "description": "The current statuses of the workflow versions"
          },
          "position": { "type": "number", "description": "Workflow record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Workflow for Response": {
        "type": "object",
        "description": "A workflow",
        "properties": {
          "name": { "type": "string", "description": "The workflow name" },
          "lastPublishedVersionId": { "type": "string", "description": "The workflow last published version id" },
          "statuses": {
            "type": "array",
            "items": { "type": "string", "enum": ["DRAFT", "ACTIVE", "DEACTIVATED"] },
            "description": "The current statuses of the workflow versions"
          },
          "position": { "type": "number", "description": "Workflow record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "versions": { "description": "Workflow versions linked to the workflow." },
          "runs": { "description": "Workflow runs linked to the workflow." },
          "eventListeners": { "description": "Workflow event listeners linked to the workflow." },
          "automatedTriggers": { "description": "Workflow automated triggers linked to the workflow." },
          "favorites": { "description": "Favorites linked to the workflow" },
          "timelineActivities": { "description": "Timeline activities linked to the workflow" }
        }
      },
      "WorkflowEventListener": {
        "type": "object",
        "description": "A workflow event listener",
        "properties": { "eventName": { "type": "string", "description": "The workflow event listener name" } }
      },
      "WorkflowEventListener for Update": {
        "type": "object",
        "description": "A workflow event listener",
        "properties": { "eventName": { "type": "string", "description": "The workflow event listener name" } }
      },
      "WorkflowEventListener for Response": {
        "type": "object",
        "description": "A workflow event listener",
        "properties": {
          "eventName": { "type": "string", "description": "The workflow event listener name" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "workflow": { "description": "WorkflowEventListener workflow" }
        }
      },
      "WorkflowVersion": {
        "type": "object",
        "description": "A workflow version",
        "properties": {
          "name": { "type": "string", "description": "The workflow version name" },
          "trigger": { "type": "object", "description": "Json object to provide trigger" },
          "steps": { "type": "object", "description": "Json object to provide steps" },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "ACTIVE", "DEACTIVATED", "ARCHIVED"],
            "description": "The workflow version status"
          },
          "position": { "type": "number", "description": "Workflow version position" }
        }
      },
      "WorkflowVersion for Update": {
        "type": "object",
        "description": "A workflow version",
        "properties": {
          "name": { "type": "string", "description": "The workflow version name" },
          "trigger": { "type": "object", "description": "Json object to provide trigger" },
          "steps": { "type": "object", "description": "Json object to provide steps" },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "ACTIVE", "DEACTIVATED", "ARCHIVED"],
            "description": "The workflow version status"
          },
          "position": { "type": "number", "description": "Workflow version position" }
        }
      },
      "WorkflowVersion for Response": {
        "type": "object",
        "description": "A workflow version",
        "properties": {
          "name": { "type": "string", "description": "The workflow version name" },
          "trigger": { "type": "object", "description": "Json object to provide trigger" },
          "steps": { "type": "object", "description": "Json object to provide steps" },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "ACTIVE", "DEACTIVATED", "ARCHIVED"],
            "description": "The workflow version status"
          },
          "position": { "type": "number", "description": "Workflow version position" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "workflow": { "description": "WorkflowVersion workflow" },
          "runs": { "description": "Workflow runs linked to the version." },
          "favorites": { "description": "Favorites linked to the workflow version" },
          "timelineActivities": { "description": "Timeline activities linked to the version" }
        }
      },
      "WorkflowRun": {
        "type": "object",
        "description": "A workflow run",
        "properties": {
          "name": { "type": "string", "description": "Name of the workflow run" },
          "startedAt": { "type": "string", "format": "date-time", "description": "Workflow run started at" },
          "endedAt": { "type": "string", "format": "date-time", "description": "Workflow run ended at" },
          "status": {
            "type": "string",
            "enum": ["NOT_STARTED", "RUNNING", "COMPLETED", "FAILED"],
            "description": "Workflow run status"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The executor of the workflow"
          },
          "output": { "type": "object", "description": "Json object to provide output of the workflow run" },
          "context": { "type": "object", "description": "Context" },
          "position": { "type": "number", "description": "Workflow run position" }
        }
      },
      "WorkflowRun for Update": {
        "type": "object",
        "description": "A workflow run",
        "properties": {
          "name": { "type": "string", "description": "Name of the workflow run" },
          "startedAt": { "type": "string", "format": "date-time", "description": "Workflow run started at" },
          "endedAt": { "type": "string", "format": "date-time", "description": "Workflow run ended at" },
          "status": {
            "type": "string",
            "enum": ["NOT_STARTED", "RUNNING", "COMPLETED", "FAILED"],
            "description": "Workflow run status"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The executor of the workflow"
          },
          "output": { "type": "object", "description": "Json object to provide output of the workflow run" },
          "context": { "type": "object", "description": "Context" },
          "position": { "type": "number", "description": "Workflow run position" }
        }
      },
      "WorkflowRun for Response": {
        "type": "object",
        "description": "A workflow run",
        "properties": {
          "name": { "type": "string", "description": "Name of the workflow run" },
          "startedAt": { "type": "string", "format": "date-time", "description": "Workflow run started at" },
          "endedAt": { "type": "string", "format": "date-time", "description": "Workflow run ended at" },
          "status": {
            "type": "string",
            "enum": ["NOT_STARTED", "RUNNING", "COMPLETED", "FAILED"],
            "description": "Workflow run status"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The executor of the workflow"
          },
          "output": { "type": "object", "description": "Json object to provide output of the workflow run" },
          "context": { "type": "object", "description": "Context" },
          "position": { "type": "number", "description": "Workflow run position" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "workflowVersion": { "description": "Workflow version linked to the run." },
          "workflow": { "description": "Workflow linked to the run." },
          "favorites": { "description": "Favorites linked to the workflow run" },
          "timelineActivities": { "description": "Timeline activities linked to the run" }
        }
      },
      "WorkflowAutomatedTrigger": {
        "type": "object",
        "description": "A workflow automated trigger",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["DATABASE_EVENT", "CRON"],
            "description": "The workflow automated trigger type"
          },
          "settings": { "type": "object", "description": "The workflow automated trigger settings" }
        },
        "required": ["type", "settings"]
      },
      "WorkflowAutomatedTrigger for Update": {
        "type": "object",
        "description": "A workflow automated trigger",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["DATABASE_EVENT", "CRON"],
            "description": "The workflow automated trigger type"
          },
          "settings": { "type": "object", "description": "The workflow automated trigger settings" }
        }
      },
      "WorkflowAutomatedTrigger for Response": {
        "type": "object",
        "description": "A workflow automated trigger",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["DATABASE_EVENT", "CRON"],
            "description": "The workflow automated trigger type"
          },
          "settings": { "type": "object", "description": "The workflow automated trigger settings" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "workflow": { "description": "WorkflowAutomatedTrigger workflow" }
        }
      },
      "WorkspaceMember": {
        "type": "object",
        "description": "A workspace member",
        "properties": {
          "position": { "type": "number", "description": "Workspace member position" },
          "name": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
            "description": "Workspace member name"
          },
          "colorScheme": { "type": "string", "description": "Preferred color scheme" },
          "locale": { "type": "string", "description": "Preferred language" },
          "avatarUrl": { "type": "string", "description": "Workspace member avatar" },
          "userEmail": { "type": "string", "description": "Related user email address" },
          "userId": { "type": "string", "format": "uuid", "description": "Associated User Id" },
          "timeZone": { "type": "string", "description": "User time zone" },
          "dateFormat": {
            "type": "string",
            "enum": ["SYSTEM", "MONTH_FIRST", "DAY_FIRST", "YEAR_FIRST"],
            "description": "User's preferred date format"
          },
          "timeFormat": {
            "type": "string",
            "enum": ["SYSTEM", "HOUR_24", "HOUR_12"],
            "description": "User's preferred time format"
          }
        },
        "required": ["userId"]
      },
      "WorkspaceMember for Update": {
        "type": "object",
        "description": "A workspace member",
        "properties": {
          "position": { "type": "number", "description": "Workspace member position" },
          "name": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
            "description": "Workspace member name"
          },
          "colorScheme": { "type": "string", "description": "Preferred color scheme" },
          "locale": { "type": "string", "description": "Preferred language" },
          "avatarUrl": { "type": "string", "description": "Workspace member avatar" },
          "userEmail": { "type": "string", "description": "Related user email address" },
          "userId": { "type": "string", "format": "uuid", "description": "Associated User Id" },
          "timeZone": { "type": "string", "description": "User time zone" },
          "dateFormat": {
            "type": "string",
            "enum": ["SYSTEM", "MONTH_FIRST", "DAY_FIRST", "YEAR_FIRST"],
            "description": "User's preferred date format"
          },
          "timeFormat": {
            "type": "string",
            "enum": ["SYSTEM", "HOUR_24", "HOUR_12"],
            "description": "User's preferred time format"
          }
        }
      },
      "WorkspaceMember for Response": {
        "type": "object",
        "description": "A workspace member",
        "properties": {
          "position": { "type": "number", "description": "Workspace member position" },
          "name": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
            "description": "Workspace member name"
          },
          "colorScheme": { "type": "string", "description": "Preferred color scheme" },
          "locale": { "type": "string", "description": "Preferred language" },
          "avatarUrl": { "type": "string", "description": "Workspace member avatar" },
          "userEmail": { "type": "string", "description": "Related user email address" },
          "userId": { "type": "string", "format": "uuid", "description": "Associated User Id" },
          "timeZone": { "type": "string", "description": "User time zone" },
          "dateFormat": {
            "type": "string",
            "enum": ["SYSTEM", "MONTH_FIRST", "DAY_FIRST", "YEAR_FIRST"],
            "description": "User's preferred date format"
          },
          "timeFormat": {
            "type": "string",
            "enum": ["SYSTEM", "HOUR_24", "HOUR_12"],
            "description": "User's preferred time format"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "assignedTasks": { "description": "Tasks assigned to the workspace member" },
          "favorites": { "description": "Favorites linked to the workspace member" },
          "accountOwnerForCompanies": { "description": "Account owner for companies" },
          "authoredAttachments": { "description": "Attachments created by the workspace member" },
          "connectedAccounts": { "description": "Connected accounts" },
          "messageParticipants": { "description": "Message Participants" },
          "blocklist": { "description": "Blocklisted handles" },
          "calendarEventParticipants": { "description": "Calendar Event Participants" },
          "timelineActivities": { "description": "Events linked to the workspace member" }
        }
      },
      "MessageThread": {
        "type": "object",
        "description": "A group of related messages (e.g. email thread, chat thread)",
        "properties": {}
      },
      "MessageThread for Update": {
        "type": "object",
        "description": "A group of related messages (e.g. email thread, chat thread)",
        "properties": {}
      },
      "MessageThread for Response": {
        "type": "object",
        "description": "A group of related messages (e.g. email thread, chat thread)",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "messages": { "description": "Messages from the thread." }
        }
      },
      "Message": {
        "type": "object",
        "description": "A message sent or received through a messaging channel (email, chat, etc.)",
        "properties": {
          "headerMessageId": { "type": "string", "description": "Message id from the message header" },
          "subject": { "type": "string", "description": "Subject" },
          "text": { "type": "string", "description": "Text" },
          "receivedAt": { "type": "string", "format": "date-time", "description": "The date the message was received" }
        }
      },
      "Message for Update": {
        "type": "object",
        "description": "A message sent or received through a messaging channel (email, chat, etc.)",
        "properties": {
          "headerMessageId": { "type": "string", "description": "Message id from the message header" },
          "subject": { "type": "string", "description": "Subject" },
          "text": { "type": "string", "description": "Text" },
          "receivedAt": { "type": "string", "format": "date-time", "description": "The date the message was received" }
        }
      },
      "Message for Response": {
        "type": "object",
        "description": "A message sent or received through a messaging channel (email, chat, etc.)",
        "properties": {
          "headerMessageId": { "type": "string", "description": "Message id from the message header" },
          "subject": { "type": "string", "description": "Subject" },
          "text": { "type": "string", "description": "Text" },
          "receivedAt": { "type": "string", "format": "date-time", "description": "The date the message was received" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "messageThread": { "description": "Message Thread Id" },
          "messageParticipants": { "description": "Message Participants" },
          "messageChannelMessageAssociations": { "description": "Messages from the channel." }
        }
      },
      "MessageChannel": {
        "type": "object",
        "description": "Message Channels",
        "properties": {
          "visibility": {
            "type": "string",
            "enum": ["METADATA", "SUBJECT", "SHARE_EVERYTHING"],
            "description": "Visibility"
          },
          "handle": { "type": "string", "description": "Handle" },
          "type": { "type": "string", "enum": ["email", "sms"], "description": "Channel Type" },
          "isContactAutoCreationEnabled": { "type": "boolean", "description": "Is Contact Auto Creation Enabled" },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": ["SENT_AND_RECEIVED", "SENT", "NONE"],
            "description": "Automatically create People records when receiving or sending emails"
          },
          "excludeNonProfessionalEmails": { "type": "boolean", "description": "Exclude non professional emails" },
          "excludeGroupEmails": { "type": "boolean", "description": "Exclude group emails" },
          "isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
          "syncCursor": { "type": "string", "description": "Last sync cursor" },
          "syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
          "syncStatus": {
            "type": "string",
            "enum": ["ONGOING", "NOT_SYNCED", "ACTIVE", "FAILED_INSUFFICIENT_PERMISSIONS", "FAILED_UNKNOWN"],
            "description": "Sync status"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "FULL_MESSAGE_LIST_FETCH_PENDING",
              "PARTIAL_MESSAGE_LIST_FETCH_PENDING",
              "MESSAGE_LIST_FETCH_ONGOING",
              "MESSAGES_IMPORT_PENDING",
              "MESSAGES_IMPORT_ONGOING",
              "FAILED"
            ],
            "description": "Sync stage"
          },
          "syncStageStartedAt": { "type": "string", "format": "date-time", "description": "Sync stage started at" },
          "throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" }
        }
      },
      "MessageChannel for Update": {
        "type": "object",
        "description": "Message Channels",
        "properties": {
          "visibility": {
            "type": "string",
            "enum": ["METADATA", "SUBJECT", "SHARE_EVERYTHING"],
            "description": "Visibility"
          },
          "handle": { "type": "string", "description": "Handle" },
          "type": { "type": "string", "enum": ["email", "sms"], "description": "Channel Type" },
          "isContactAutoCreationEnabled": { "type": "boolean", "description": "Is Contact Auto Creation Enabled" },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": ["SENT_AND_RECEIVED", "SENT", "NONE"],
            "description": "Automatically create People records when receiving or sending emails"
          },
          "excludeNonProfessionalEmails": { "type": "boolean", "description": "Exclude non professional emails" },
          "excludeGroupEmails": { "type": "boolean", "description": "Exclude group emails" },
          "isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
          "syncCursor": { "type": "string", "description": "Last sync cursor" },
          "syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
          "syncStatus": {
            "type": "string",
            "enum": ["ONGOING", "NOT_SYNCED", "ACTIVE", "FAILED_INSUFFICIENT_PERMISSIONS", "FAILED_UNKNOWN"],
            "description": "Sync status"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "FULL_MESSAGE_LIST_FETCH_PENDING",
              "PARTIAL_MESSAGE_LIST_FETCH_PENDING",
              "MESSAGE_LIST_FETCH_ONGOING",
              "MESSAGES_IMPORT_PENDING",
              "MESSAGES_IMPORT_ONGOING",
              "FAILED"
            ],
            "description": "Sync stage"
          },
          "syncStageStartedAt": { "type": "string", "format": "date-time", "description": "Sync stage started at" },
          "throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" }
        }
      },
      "MessageChannel for Response": {
        "type": "object",
        "description": "Message Channels",
        "properties": {
          "visibility": {
            "type": "string",
            "enum": ["METADATA", "SUBJECT", "SHARE_EVERYTHING"],
            "description": "Visibility"
          },
          "handle": { "type": "string", "description": "Handle" },
          "type": { "type": "string", "enum": ["email", "sms"], "description": "Channel Type" },
          "isContactAutoCreationEnabled": { "type": "boolean", "description": "Is Contact Auto Creation Enabled" },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": ["SENT_AND_RECEIVED", "SENT", "NONE"],
            "description": "Automatically create People records when receiving or sending emails"
          },
          "excludeNonProfessionalEmails": { "type": "boolean", "description": "Exclude non professional emails" },
          "excludeGroupEmails": { "type": "boolean", "description": "Exclude group emails" },
          "isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
          "syncCursor": { "type": "string", "description": "Last sync cursor" },
          "syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
          "syncStatus": {
            "type": "string",
            "enum": ["ONGOING", "NOT_SYNCED", "ACTIVE", "FAILED_INSUFFICIENT_PERMISSIONS", "FAILED_UNKNOWN"],
            "description": "Sync status"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "FULL_MESSAGE_LIST_FETCH_PENDING",
              "PARTIAL_MESSAGE_LIST_FETCH_PENDING",
              "MESSAGE_LIST_FETCH_ONGOING",
              "MESSAGES_IMPORT_PENDING",
              "MESSAGES_IMPORT_ONGOING",
              "FAILED"
            ],
            "description": "Sync stage"
          },
          "syncStageStartedAt": { "type": "string", "format": "date-time", "description": "Sync stage started at" },
          "throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "connectedAccount": { "description": "Connected Account" },
          "messageChannelMessageAssociations": { "description": "Messages from the channel." },
          "messageFolders": { "description": "Message Folders" }
        }
      },
      "MessageParticipant": {
        "type": "object",
        "description": "Message Participants",
        "properties": {
          "role": { "type": "string", "enum": ["from", "to", "cc", "bcc"], "description": "Role" },
          "handle": { "type": "string", "description": "Handle" },
          "displayName": { "type": "string", "description": "Display Name" }
        }
      },
      "MessageParticipant for Update": {
        "type": "object",
        "description": "Message Participants",
        "properties": {
          "role": { "type": "string", "enum": ["from", "to", "cc", "bcc"], "description": "Role" },
          "handle": { "type": "string", "description": "Handle" },
          "displayName": { "type": "string", "description": "Display Name" }
        }
      },
      "MessageParticipant for Response": {
        "type": "object",
        "description": "Message Participants",
        "properties": {
          "role": { "type": "string", "enum": ["from", "to", "cc", "bcc"], "description": "Role" },
          "handle": { "type": "string", "description": "Handle" },
          "displayName": { "type": "string", "description": "Display Name" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "message": { "description": "Message" },
          "person": { "description": "Person" },
          "workspaceMember": { "description": "Workspace member" }
        }
      },
      "MessageFolder": {
        "type": "object",
        "description": "Folder for Message Channel",
        "properties": {
          "name": { "type": "string", "description": "Folder name" },
          "syncCursor": { "type": "string", "description": "Sync Cursor" }
        }
      },
      "MessageFolder for Update": {
        "type": "object",
        "description": "Folder for Message Channel",
        "properties": {
          "name": { "type": "string", "description": "Folder name" },
          "syncCursor": { "type": "string", "description": "Sync Cursor" }
        }
      },
      "MessageFolder for Response": {
        "type": "object",
        "description": "Folder for Message Channel",
        "properties": {
          "name": { "type": "string", "description": "Folder name" },
          "syncCursor": { "type": "string", "description": "Sync Cursor" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "messageChannel": { "description": "Message Channel" }
        }
      },
      "MessageChannelMessageAssociation": {
        "type": "object",
        "description": "Message Synced with a Message Channel",
        "properties": {
          "messageExternalId": { "type": "string", "description": "Message id from the messaging provider" },
          "messageThreadExternalId": { "type": "string", "description": "Thread id from the messaging provider" },
          "direction": { "type": "string", "enum": ["INCOMING", "OUTGOING"], "description": "Message Direction" }
        }
      },
      "MessageChannelMessageAssociation for Update": {
        "type": "object",
        "description": "Message Synced with a Message Channel",
        "properties": {
          "messageExternalId": { "type": "string", "description": "Message id from the messaging provider" },
          "messageThreadExternalId": { "type": "string", "description": "Thread id from the messaging provider" },
          "direction": { "type": "string", "enum": ["INCOMING", "OUTGOING"], "description": "Message Direction" }
        }
      },
      "MessageChannelMessageAssociation for Response": {
        "type": "object",
        "description": "Message Synced with a Message Channel",
        "properties": {
          "messageExternalId": { "type": "string", "description": "Message id from the messaging provider" },
          "messageThreadExternalId": { "type": "string", "description": "Thread id from the messaging provider" },
          "direction": { "type": "string", "enum": ["INCOMING", "OUTGOING"], "description": "Message Direction" },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "messageChannel": { "description": "Message Channel Id" },
          "message": { "description": "Message Id" }
        }
      },
      "Note": {
        "type": "object",
        "description": "A note",
        "properties": {
          "position": { "type": "number", "description": "Note record position" },
          "title": { "type": "string", "description": "Note title" },
          "body": { "type": "string", "description": "Note body" },
          "bodyV2": {
            "type": "object",
            "properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
            "description": "Note body"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Note for Update": {
        "type": "object",
        "description": "A note",
        "properties": {
          "position": { "type": "number", "description": "Note record position" },
          "title": { "type": "string", "description": "Note title" },
          "body": { "type": "string", "description": "Note body" },
          "bodyV2": {
            "type": "object",
            "properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
            "description": "Note body"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Note for Response": {
        "type": "object",
        "description": "A note",
        "properties": {
          "position": { "type": "number", "description": "Note record position" },
          "title": { "type": "string", "description": "Note title" },
          "body": { "type": "string", "description": "Note body" },
          "bodyV2": {
            "type": "object",
            "properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
            "description": "Note body"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "noteTargets": { "description": "Note targets" },
          "attachments": { "description": "Note attachments" },
          "timelineActivities": { "description": "Timeline Activities linked to the note." },
          "favorites": { "description": "Favorites linked to the note" }
        }
      },
      "NoteTarget": { "type": "object", "description": "A note target", "properties": {} },
      "NoteTarget for Update": { "type": "object", "description": "A note target", "properties": {} },
      "NoteTarget for Response": {
        "type": "object",
        "description": "A note target",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "note": { "description": "NoteTarget note" },
          "person": { "description": "NoteTarget person" },
          "company": { "description": "NoteTarget company" },
          "opportunity": { "description": "NoteTarget opportunity" },
          "pet": { "description": "NoteTargets Pet" },
          "surveyResult": { "description": "NoteTargets Survey result" }
        }
      },
      "Opportunity": {
        "type": "object",
        "description": "An opportunity",
        "properties": {
          "name": { "type": "string", "description": "The opportunity name" },
          "amount": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } },
            "description": "Opportunity amount"
          },
          "closeDate": { "type": "string", "format": "date-time", "description": "Opportunity close date" },
          "stage": {
            "type": "string",
            "enum": ["NEW", "SCREENING", "MEETING", "PROPOSAL", "CUSTOMER"],
            "description": "Opportunity stage"
          },
          "position": { "type": "number", "description": "Opportunity record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Opportunity for Update": {
        "type": "object",
        "description": "An opportunity",
        "properties": {
          "name": { "type": "string", "description": "The opportunity name" },
          "amount": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } },
            "description": "Opportunity amount"
          },
          "closeDate": { "type": "string", "format": "date-time", "description": "Opportunity close date" },
          "stage": {
            "type": "string",
            "enum": ["NEW", "SCREENING", "MEETING", "PROPOSAL", "CUSTOMER"],
            "description": "Opportunity stage"
          },
          "position": { "type": "number", "description": "Opportunity record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Opportunity for Response": {
        "type": "object",
        "description": "An opportunity",
        "properties": {
          "name": { "type": "string", "description": "The opportunity name" },
          "amount": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } },
            "description": "Opportunity amount"
          },
          "closeDate": { "type": "string", "format": "date-time", "description": "Opportunity close date" },
          "stage": {
            "type": "string",
            "enum": ["NEW", "SCREENING", "MEETING", "PROPOSAL", "CUSTOMER"],
            "description": "Opportunity stage"
          },
          "position": { "type": "number", "description": "Opportunity record position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "pointOfContact": { "description": "Opportunity point of contact" },
          "company": { "description": "Opportunity company" },
          "favorites": { "description": "Favorites linked to the opportunity" },
          "taskTargets": { "description": "Tasks tied to the opportunity" },
          "noteTargets": { "description": "Notes tied to the opportunity" },
          "attachments": { "description": "Attachments linked to the opportunity" },
          "timelineActivities": { "description": "Timeline Activities linked to the opportunity." }
        }
      },
      "Person": {
        "type": "object",
        "description": "A person",
        "properties": {
          "name": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
            "description": "Contact’s name"
          },
          "emails": {
            "type": "object",
            "properties": {
              "primaryEmail": { "type": "string" },
              "additionalEmails": { "type": "array", "items": { "type": "string", "format": "email" } }
            },
            "description": "Contact’s Emails"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Contact’s Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Contact’s X/Twitter account"
          },
          "jobTitle": { "type": "string", "description": "Contact’s job title" },
          "phones": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object",
            "description": "Contact’s phone numbers"
          },
          "city": { "type": "string", "description": "Contact’s city" },
          "avatarUrl": { "type": "string", "description": "Contact’s avatar" },
          "position": { "type": "number", "description": "Person record Position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "intro": { "type": "string", "description": "Contact's Intro" },
          "whatsapp": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object",
            "description": "Contact's Whatsapp Number"
          },
          "workPreference": {
            "type": "array",
            "items": { "type": "string", "enum": ["ON_SITE", "HYBRID", "REMOTE_WORK"] },
            "description": "Person's Work Preference"
          },
          "performanceRating": {
            "type": "string",
            "enum": ["RATING_1", "RATING_2", "RATING_3", "RATING_4", "RATING_5"],
            "description": "Person's Performance Rating"
          }
        }
      },
      "Person for Update": {
        "type": "object",
        "description": "A person",
        "properties": {
          "name": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
            "description": "Contact’s name"
          },
          "emails": {
            "type": "object",
            "properties": {
              "primaryEmail": { "type": "string" },
              "additionalEmails": { "type": "array", "items": { "type": "string", "format": "email" } }
            },
            "description": "Contact’s Emails"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Contact’s Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Contact’s X/Twitter account"
          },
          "jobTitle": { "type": "string", "description": "Contact’s job title" },
          "phones": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object",
            "description": "Contact’s phone numbers"
          },
          "city": { "type": "string", "description": "Contact’s city" },
          "avatarUrl": { "type": "string", "description": "Contact’s avatar" },
          "position": { "type": "number", "description": "Person record Position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "intro": { "type": "string", "description": "Contact's Intro" },
          "whatsapp": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object",
            "description": "Contact's Whatsapp Number"
          },
          "workPreference": {
            "type": "array",
            "items": { "type": "string", "enum": ["ON_SITE", "HYBRID", "REMOTE_WORK"] },
            "description": "Person's Work Preference"
          },
          "performanceRating": {
            "type": "string",
            "enum": ["RATING_1", "RATING_2", "RATING_3", "RATING_4", "RATING_5"],
            "description": "Person's Performance Rating"
          }
        }
      },
      "Person for Response": {
        "type": "object",
        "description": "A person",
        "properties": {
          "name": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
            "description": "Contact’s name"
          },
          "emails": {
            "type": "object",
            "properties": {
              "primaryEmail": { "type": "string" },
              "additionalEmails": { "type": "array", "items": { "type": "string", "format": "email" } }
            },
            "description": "Contact’s Emails"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Contact’s Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            },
            "description": "Contact’s X/Twitter account"
          },
          "jobTitle": { "type": "string", "description": "Contact’s job title" },
          "phones": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object",
            "description": "Contact’s phone numbers"
          },
          "city": { "type": "string", "description": "Contact’s city" },
          "avatarUrl": { "type": "string", "description": "Contact’s avatar" },
          "position": { "type": "number", "description": "Person record Position" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "intro": { "type": "string", "description": "Contact's Intro" },
          "whatsapp": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object",
            "description": "Contact's Whatsapp Number"
          },
          "workPreference": {
            "type": "array",
            "items": { "type": "string", "enum": ["ON_SITE", "HYBRID", "REMOTE_WORK"] },
            "description": "Person's Work Preference"
          },
          "performanceRating": {
            "type": "string",
            "enum": ["RATING_1", "RATING_2", "RATING_3", "RATING_4", "RATING_5"],
            "description": "Person's Performance Rating"
          },
          "company": { "description": "Contact’s company" },
          "pointOfContactForOpportunities": {
            "description": "List of opportunities for which that person is the point of contact"
          },
          "taskTargets": { "description": "Tasks tied to the contact" },
          "noteTargets": { "description": "Notes tied to the contact" },
          "favorites": { "description": "Favorites linked to the contact" },
          "attachments": { "description": "Attachments linked to the contact." },
          "messageParticipants": { "description": "Message Participants" },
          "calendarEventParticipants": { "description": "Calendar Event Participants" },
          "timelineActivities": { "description": "Events linked to the person" }
        }
      },
      "Task": {
        "type": "object",
        "description": "A task",
        "properties": {
          "position": { "type": "number", "description": "Task record position" },
          "title": { "type": "string", "description": "Task title" },
          "body": { "type": "string", "description": "Task body" },
          "bodyV2": {
            "type": "object",
            "properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
            "description": "Task body"
          },
          "dueAt": { "type": "string", "format": "date-time", "description": "Task due date" },
          "status": { "type": "string", "enum": ["TODO", "IN_PROGRESS", "DONE"], "description": "Task status" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Task for Update": {
        "type": "object",
        "description": "A task",
        "properties": {
          "position": { "type": "number", "description": "Task record position" },
          "title": { "type": "string", "description": "Task title" },
          "body": { "type": "string", "description": "Task body" },
          "bodyV2": {
            "type": "object",
            "properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
            "description": "Task body"
          },
          "dueAt": { "type": "string", "format": "date-time", "description": "Task due date" },
          "status": { "type": "string", "enum": ["TODO", "IN_PROGRESS", "DONE"], "description": "Task status" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          }
        }
      },
      "Task for Response": {
        "type": "object",
        "description": "A task",
        "properties": {
          "position": { "type": "number", "description": "Task record position" },
          "title": { "type": "string", "description": "Task title" },
          "body": { "type": "string", "description": "Task body" },
          "bodyV2": {
            "type": "object",
            "properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
            "description": "Task body"
          },
          "dueAt": { "type": "string", "format": "date-time", "description": "Task due date" },
          "status": { "type": "string", "enum": ["TODO", "IN_PROGRESS", "DONE"], "description": "Task status" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "taskTargets": { "description": "Task targets" },
          "attachments": { "description": "Task attachments" },
          "assignee": { "description": "Task assignee" },
          "timelineActivities": { "description": "Timeline Activities linked to the task." },
          "favorites": { "description": "Favorites linked to the task" }
        }
      },
      "TaskTarget": { "type": "object", "description": "A task target", "properties": {} },
      "TaskTarget for Update": { "type": "object", "description": "A task target", "properties": {} },
      "TaskTarget for Response": {
        "type": "object",
        "description": "A task target",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Date when the record was deleted" },
          "task": { "description": "TaskTarget task" },
          "person": { "description": "TaskTarget person" },
          "company": { "description": "TaskTarget company" },
          "opportunity": { "description": "TaskTarget opportunity" },
          "pet": { "description": "TaskTargets Pet" },
          "surveyResult": { "description": "TaskTargets Survey result" }
        }
      },
      "Pet": {
        "type": "object",
        "description": null,
        "properties": {
          "name": { "type": "string", "description": "Name" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "position": { "type": "number", "description": "Position" },
          "species": { "type": "string", "enum": ["dog", "cat", "bird", "fish", "rabbit", "hamster"] },
          "traits": {
            "type": "array",
            "items": { "type": "string", "enum": ["playful", "friendly", "protective", "shy", "brave", "curious"] }
          },
          "comments": { "type": "string" },
          "age": { "type": "integer" },
          "location": {
            "type": "object",
            "properties": {
              "addressStreet1": { "type": "string" },
              "addressStreet2": { "type": "string" },
              "addressCity": { "type": "string" },
              "addressPostcode": { "type": "string" },
              "addressState": { "type": "string" },
              "addressCountry": { "type": "string" },
              "addressLat": { "type": "number" },
              "addressLng": { "type": "number" }
            }
          },
          "vetPhone": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object"
          },
          "vetEmail": {
            "type": "object",
            "properties": {
              "primaryEmail": { "type": "string" },
              "additionalEmails": { "type": "array", "items": { "type": "string", "format": "email" } }
            }
          },
          "birthday": { "type": "string", "format": "date" },
          "isGoodWithKids": { "type": "boolean" },
          "pictures": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            }
          },
          "averageCostOfKibblePerMonth": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } }
          },
          "makesOwnerThinkOf": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } }
          },
          "soundSwag": { "type": "string", "enum": ["RATING_1", "RATING_2", "RATING_3", "RATING_4", "RATING_5"] },
          "bio": { "type": "string" },
          "interestingFacts": { "type": "array", "items": { "type": "string" } },
          "extraData": { "type": "object" }
        }
      },
      "Pet for Update": {
        "type": "object",
        "description": null,
        "properties": {
          "name": { "type": "string", "description": "Name" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "position": { "type": "number", "description": "Position" },
          "species": { "type": "string", "enum": ["dog", "cat", "bird", "fish", "rabbit", "hamster"] },
          "traits": {
            "type": "array",
            "items": { "type": "string", "enum": ["playful", "friendly", "protective", "shy", "brave", "curious"] }
          },
          "comments": { "type": "string" },
          "age": { "type": "integer" },
          "location": {
            "type": "object",
            "properties": {
              "addressStreet1": { "type": "string" },
              "addressStreet2": { "type": "string" },
              "addressCity": { "type": "string" },
              "addressPostcode": { "type": "string" },
              "addressState": { "type": "string" },
              "addressCountry": { "type": "string" },
              "addressLat": { "type": "number" },
              "addressLng": { "type": "number" }
            }
          },
          "vetPhone": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object"
          },
          "vetEmail": {
            "type": "object",
            "properties": {
              "primaryEmail": { "type": "string" },
              "additionalEmails": { "type": "array", "items": { "type": "string", "format": "email" } }
            }
          },
          "birthday": { "type": "string", "format": "date" },
          "isGoodWithKids": { "type": "boolean" },
          "pictures": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            }
          },
          "averageCostOfKibblePerMonth": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } }
          },
          "makesOwnerThinkOf": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } }
          },
          "soundSwag": { "type": "string", "enum": ["RATING_1", "RATING_2", "RATING_3", "RATING_4", "RATING_5"] },
          "bio": { "type": "string" },
          "interestingFacts": { "type": "array", "items": { "type": "string" } },
          "extraData": { "type": "object" }
        }
      },
      "Pet for Response": {
        "type": "object",
        "description": null,
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "name": { "type": "string", "description": "Name" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Deletion date" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "position": { "type": "number", "description": "Position" },
          "species": { "type": "string", "enum": ["dog", "cat", "bird", "fish", "rabbit", "hamster"] },
          "traits": {
            "type": "array",
            "items": { "type": "string", "enum": ["playful", "friendly", "protective", "shy", "brave", "curious"] }
          },
          "comments": { "type": "string" },
          "age": { "type": "integer" },
          "location": {
            "type": "object",
            "properties": {
              "addressStreet1": { "type": "string" },
              "addressStreet2": { "type": "string" },
              "addressCity": { "type": "string" },
              "addressPostcode": { "type": "string" },
              "addressState": { "type": "string" },
              "addressCountry": { "type": "string" },
              "addressLat": { "type": "number" },
              "addressLng": { "type": "number" }
            }
          },
          "vetPhone": {
            "properties": {
              "additionalPhones": { "type": "array", "items": { "type": "string" } },
              "primaryPhoneCountryCode": { "type": "string" },
              "primaryPhoneCallingCode": { "type": "string" },
              "primaryPhoneNumber": { "type": "string" }
            },
            "type": "object"
          },
          "vetEmail": {
            "type": "object",
            "properties": {
              "primaryEmail": { "type": "string" },
              "additionalEmails": { "type": "array", "items": { "type": "string", "format": "email" } }
            }
          },
          "birthday": { "type": "string", "format": "date" },
          "isGoodWithKids": { "type": "boolean" },
          "pictures": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": { "type": "string" },
              "primaryLinkUrl": { "type": "string" },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": { "url": { "type": "string", "format": "uri" }, "label": { "type": "string" } }
                }
              }
            }
          },
          "averageCostOfKibblePerMonth": {
            "type": "object",
            "properties": { "amountMicros": { "type": "number" }, "currencyCode": { "type": "string" } }
          },
          "makesOwnerThinkOf": {
            "type": "object",
            "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } }
          },
          "soundSwag": { "type": "string", "enum": ["RATING_1", "RATING_2", "RATING_3", "RATING_4", "RATING_5"] },
          "bio": { "type": "string" },
          "interestingFacts": { "type": "array", "items": { "type": "string" } },
          "extraData": { "type": "object" },
          "timelineActivities": { "description": "TimelineActivities tied to the Pet" },
          "favorites": { "description": "Favorites tied to the Pet" },
          "attachments": { "description": "Attachments tied to the Pet" },
          "noteTargets": { "description": "NoteTargets tied to the Pet" },
          "taskTargets": { "description": "TaskTargets tied to the Pet" }
        }
      },
      "SurveyResult": {
        "type": "object",
        "description": null,
        "properties": {
          "name": { "type": "string", "description": "Name" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "position": { "type": "number", "description": "Position" },
          "score": { "type": "number" },
          "percentageOfCompletion": { "type": "number" },
          "participants": { "type": "integer" },
          "averageEstimatedNumberOfAtomsInTheUniverse": { "type": "integer" },
          "comments": { "type": "string" },
          "shortNotes": { "type": "string" }
        }
      },
      "SurveyResult for Update": {
        "type": "object",
        "description": null,
        "properties": {
          "name": { "type": "string", "description": "Name" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              }
            },
            "description": "The creator of the record"
          },
          "position": { "type": "number", "description": "Position" },
          "score": { "type": "number" },
          "percentageOfCompletion": { "type": "number" },
          "participants": { "type": "integer" },
          "averageEstimatedNumberOfAtomsInTheUniverse": { "type": "integer" },
          "comments": { "type": "string" },
          "shortNotes": { "type": "string" }
        }
      },
      "SurveyResult for Response": {
        "type": "object",
        "description": null,
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Id" },
          "name": { "type": "string", "description": "Name" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last time the record was changed" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Deletion date" },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": ["EMAIL", "CALENDAR", "WORKFLOW", "API", "IMPORT", "MANUAL", "SYSTEM", "WEBHOOK"]
              },
              "workspaceMemberId": { "type": "string", "format": "uuid" },
              "name": { "type": "string" }
            },
            "description": "The creator of the record"
          },
          "position": { "type": "number", "description": "Position" },
          "score": { "type": "number" },
          "percentageOfCompletion": { "type": "number" },
          "participants": { "type": "integer" },
          "averageEstimatedNumberOfAtomsInTheUniverse": { "type": "integer" },
          "comments": { "type": "string" },
          "shortNotes": { "type": "string" },
          "timelineActivities": { "description": "TimelineActivities tied to the Survey result" },
          "favorites": { "description": "Favorites tied to the Survey result" },
          "attachments": { "description": "Attachments tied to the Survey result" },
          "noteTargets": { "description": "NoteTargets tied to the Survey result" },
          "taskTargets": { "description": "TaskTargets tied to the Survey result" }
        }
      }
    },
    "parameters": {
      "idPath": {
        "name": "id",
        "in": "path",
        "description": "Object id.",
        "required": true,
        "schema": { "type": "string", "format": "uuid" }
      },
      "startingAfter": {
        "name": "starting_after",
        "in": "query",
        "description": "Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data",
        "required": false,
        "schema": { "type": "string" }
      },
      "endingBefore": {
        "name": "ending_before",
        "in": "query",
        "description": "Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data",
        "required": false,
        "schema": { "type": "string" }
      },
      "filter": {
        "name": "filter",
        "in": "query",
        "description": "Filters objects returned.  \n    Should have the following shape: **field_1[COMPARATOR]:value_1,field_2[COMPARATOR]:value_2...\n    To filter on composite type fields use **field.subField[COMPARATOR]:value_1\n    **\n    Available comparators are **eq**, **neq**, **in**, **containsAny**, **is**, **gt**, **gte**, **lt**, **lte**, **startsWith**, **like**, **ilike**.  \n    You can create more complex filters using conjunctions **or**, **and**, **not**.  \n    Default root conjunction is **and**.  \n    To filter **null** values use **field[is]:NULL** or **field[is]:NOT_NULL**  \n    To filter using **boolean** values use **field[eq]:true** or **field[eq]:false**",
        "required": false,
        "schema": { "type": "string" },
        "examples": {
          "simple": { "value": "createdAt[gte]:\"2023-01-01\"", "description": "A simple filter param" },
          "simpleNested": {
            "value": "emails.primaryEmail[eq]:foo99@example.com",
            "description": "A simple composite type filter param"
          },
          "complex": {
            "value": "or(createdAt[gte]:\"2024-01-01\",createdAt[lte]:\"2023-01-01\",not(id[is]:NULL))",
            "description": "A more complex filter param"
          }
        }
      },
      "depth": {
        "name": "depth",
        "in": "query",
        "description": "Determines the level of nested related objects to include in the response.  \n    - 0: Returns only the primary object's information.  \n    - 1: Returns the primary object along with its directly related objects (with no additional nesting for related objects).  \n    - 2: Returns the primary object, its directly related objects, and the related objects of those related objects.",
        "required": false,
        "schema": { "type": "integer", "enum": [0, 1, 2], "default": 1 }
      },
      "orderBy": {
        "name": "order_by",
        "in": "query",
        "description": "Sorts objects returned.  \n    Should have the following shape: **field_name_1,field_name_2[DIRECTION_2],...**  \n    Available directions are **AscNullsFirst**, **AscNullsLast**, **DescNullsFirst**, **DescNullsLast**.  \n    Default direction is **AscNullsFirst**",
        "required": false,
        "schema": { "type": "string" },
        "examples": {
          "simple": { "value": "createdAt", "summary": "A simple order_by param" },
          "complex": {
            "value": "id[AscNullsFirst],createdAt[DescNullsLast]",
            "summary": "A more complex order_by param"
          }
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Limits the number of objects returned.",
        "required": false,
        "schema": { "type": "integer", "minimum": 0, "maximum": 60, "default": 60 }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": { "type": "number" },
                "messages": { "type": "array", "items": { "type": "string" } },
                "error": { "type": "string" }
              },
              "example": { "statusCode": 400, "message": "error message", "error": "Bad Request" }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": { "type": "number" },
                "message": { "type": "string" },
                "error": { "type": "string" }
              },
              "example": { "statusCode": 401, "message": "Token invalid.", "error": "Unauthorized" }
            }
          }
        }
      }
    }
  },
  "security": [{ "bearerAuth": [] }],
  "externalDocs": { "description": "Find out more about **Twenty**", "url": "https://twenty.com" },
  "paths": {
    "/open-api/core": {
      "get": {
        "tags": ["General"],
        "summary": "Get Open Api Schema",
        "operationId": "GetOpenApiSchema",
        "servers": [{ "url": "http://localhost:3000" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openapi": { "type": "string" },
                    "info": {
                      "type": "object",
                      "properties": {
                        "title": { "type": "string" },
                        "description": { "type": "string" },
                        "termsOfService": { "type": "string" },
                        "contact": { "type": "object", "properties": { "email": { "type": "string" } } },
                        "license": {
                          "type": "object",
                          "properties": { "name": { "type": "string" }, "url": { "type": "string" } }
                        }
                      }
                    },
                    "servers": {
                      "type": "array",
                      "items": { "url": { "type": "string" }, "description": { "type": "string" } }
                    },
                    "components": {
                      "type": "object",
                      "properties": {
                        "schemas": { "type": "object" },
                        "parameters": { "type": "object" },
                        "responses": { "type": "object" }
                      }
                    },
                    "paths": { "type": "object" },
                    "tags": { "type": "object" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/apiKeys": {
      "get": {
        "tags": ["apiKeys"],
        "summary": "Find Many apiKeys",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **apiKeys**",
        "operationId": "findManyApiKeys",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "apiKeys": { "type": "array", "items": { "$ref": "#/components/schemas/ApiKey for Response" } }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["apiKeys"],
        "summary": "Create One apiKey",
        "operationId": "createOneApiKey",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiKey" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createApiKey": { "$ref": "#/components/schemas/ApiKey for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/apiKeys": {
      "post": {
        "tags": ["apiKeys"],
        "summary": "Create Many apiKeys",
        "operationId": "createManyApiKeys",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ApiKey" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createApiKeys": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ApiKey for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/apiKeys/{id}": {
      "get": {
        "tags": ["apiKeys"],
        "summary": "Find One apiKey",
        "description": "**depth** can be provided to request your **apiKey**",
        "operationId": "findOneApiKey",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "apiKey": { "$ref": "#/components/schemas/ApiKey for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["apiKeys"],
        "summary": "Delete One apiKey",
        "operationId": "deleteOneApiKey",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteApiKey": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["apiKeys"],
        "summary": "Update One apiKey",
        "operationId": "UpdateOneApiKey",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiKey for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateApiKey": { "$ref": "#/components/schemas/ApiKey for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/apiKeys/duplicates": {
      "post": {
        "tags": ["apiKeys"],
        "summary": "Find apiKey Duplicates",
        "description": "**depth** can be provided to request your **apiKey**",
        "operationId": "findApiKeyDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/ApiKey" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/ApiKey for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/attachments": {
      "get": {
        "tags": ["attachments"],
        "summary": "Find Many attachments",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **attachments**",
        "operationId": "findManyAttachments",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "attachments": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Attachment for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["attachments"],
        "summary": "Create One attachment",
        "operationId": "createOneAttachment",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Attachment" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createAttachment": { "$ref": "#/components/schemas/Attachment for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/attachments": {
      "post": {
        "tags": ["attachments"],
        "summary": "Create Many attachments",
        "operationId": "createManyAttachments",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Attachment" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createAttachments": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Attachment for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/attachments/{id}": {
      "get": {
        "tags": ["attachments"],
        "summary": "Find One attachment",
        "description": "**depth** can be provided to request your **attachment**",
        "operationId": "findOneAttachment",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "attachment": { "$ref": "#/components/schemas/Attachment for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["attachments"],
        "summary": "Delete One attachment",
        "operationId": "deleteOneAttachment",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteAttachment": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["attachments"],
        "summary": "Update One attachment",
        "operationId": "UpdateOneAttachment",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Attachment for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateAttachment": { "$ref": "#/components/schemas/Attachment for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/attachments/duplicates": {
      "post": {
        "tags": ["attachments"],
        "summary": "Find attachment Duplicates",
        "description": "**depth** can be provided to request your **attachment**",
        "operationId": "findAttachmentDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Attachment" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Attachment for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/blocklists": {
      "get": {
        "tags": ["blocklists"],
        "summary": "Find Many blocklists",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **blocklists**",
        "operationId": "findManyBlocklists",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "blocklists": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Blocklist for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["blocklists"],
        "summary": "Create One blocklist",
        "operationId": "createOneBlocklist",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Blocklist" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createBlocklist": { "$ref": "#/components/schemas/Blocklist for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/blocklists": {
      "post": {
        "tags": ["blocklists"],
        "summary": "Create Many blocklists",
        "operationId": "createManyBlocklists",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Blocklist" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createBlocklists": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Blocklist for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/blocklists/{id}": {
      "get": {
        "tags": ["blocklists"],
        "summary": "Find One blocklist",
        "description": "**depth** can be provided to request your **blocklist**",
        "operationId": "findOneBlocklist",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "blocklist": { "$ref": "#/components/schemas/Blocklist for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["blocklists"],
        "summary": "Delete One blocklist",
        "operationId": "deleteOneBlocklist",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteBlocklist": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["blocklists"],
        "summary": "Update One blocklist",
        "operationId": "UpdateOneBlocklist",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Blocklist for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateBlocklist": { "$ref": "#/components/schemas/Blocklist for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/blocklists/duplicates": {
      "post": {
        "tags": ["blocklists"],
        "summary": "Find blocklist Duplicates",
        "description": "**depth** can be provided to request your **blocklist**",
        "operationId": "findBlocklistDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Blocklist" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Blocklist for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarEvents": {
      "get": {
        "tags": ["calendarEvents"],
        "summary": "Find Many calendarEvents",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarEvents**",
        "operationId": "findManyCalendarEvents",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarEvents": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarEvent for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["calendarEvents"],
        "summary": "Create One calendarEvent",
        "operationId": "createOneCalendarEvent",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarEvent" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEvent": { "$ref": "#/components/schemas/CalendarEvent for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/calendarEvents": {
      "post": {
        "tags": ["calendarEvents"],
        "summary": "Create Many calendarEvents",
        "operationId": "createManyCalendarEvents",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarEvent" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEvents": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarEvent for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarEvents/{id}": {
      "get": {
        "tags": ["calendarEvents"],
        "summary": "Find One calendarEvent",
        "description": "**depth** can be provided to request your **calendarEvent**",
        "operationId": "findOneCalendarEvent",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "calendarEvent": { "$ref": "#/components/schemas/CalendarEvent for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["calendarEvents"],
        "summary": "Delete One calendarEvent",
        "operationId": "deleteOneCalendarEvent",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarEvent": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["calendarEvents"],
        "summary": "Update One calendarEvent",
        "operationId": "UpdateOneCalendarEvent",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarEvent for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarEvent": { "$ref": "#/components/schemas/CalendarEvent for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarEvents/duplicates": {
      "post": {
        "tags": ["calendarEvents"],
        "summary": "Find calendarEvent Duplicates",
        "description": "**depth** can be provided to request your **calendarEvent**",
        "operationId": "findCalendarEventDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarEvent" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/CalendarEvent for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarChannels": {
      "get": {
        "tags": ["calendarChannels"],
        "summary": "Find Many calendarChannels",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarChannels**",
        "operationId": "findManyCalendarChannels",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannels": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["calendarChannels"],
        "summary": "Create One calendarChannel",
        "operationId": "createOneCalendarChannel",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarChannel" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannel": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/calendarChannels": {
      "post": {
        "tags": ["calendarChannels"],
        "summary": "Create Many calendarChannels",
        "operationId": "createManyCalendarChannels",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarChannel" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannels": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarChannels/{id}": {
      "get": {
        "tags": ["calendarChannels"],
        "summary": "Find One calendarChannel",
        "description": "**depth** can be provided to request your **calendarChannel**",
        "operationId": "findOneCalendarChannel",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannel": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["calendarChannels"],
        "summary": "Delete One calendarChannel",
        "operationId": "deleteOneCalendarChannel",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarChannel": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["calendarChannels"],
        "summary": "Update One calendarChannel",
        "operationId": "UpdateOneCalendarChannel",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarChannel for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarChannel": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarChannels/duplicates": {
      "post": {
        "tags": ["calendarChannels"],
        "summary": "Find calendarChannel Duplicates",
        "description": "**depth** can be provided to request your **calendarChannel**",
        "operationId": "findCalendarChannelDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarChannel" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarChannelEventAssociations": {
      "get": {
        "tags": ["calendarChannelEventAssociations"],
        "summary": "Find Many calendarChannelEventAssociations",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarChannelEventAssociations**",
        "operationId": "findManyCalendarChannelEventAssociations",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannelEventAssociations": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["calendarChannelEventAssociations"],
        "summary": "Create One calendarChannelEventAssociation",
        "operationId": "createOneCalendarChannelEventAssociation",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CalendarChannelEventAssociation" } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannelEventAssociation": {
                          "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/calendarChannelEventAssociations": {
      "post": {
        "tags": ["calendarChannelEventAssociations"],
        "summary": "Create Many calendarChannelEventAssociations",
        "operationId": "createManyCalendarChannelEventAssociations",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarChannelEventAssociation" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannelEventAssociations": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarChannelEventAssociations/{id}": {
      "get": {
        "tags": ["calendarChannelEventAssociations"],
        "summary": "Find One calendarChannelEventAssociation",
        "description": "**depth** can be provided to request your **calendarChannelEventAssociation**",
        "operationId": "findOneCalendarChannelEventAssociation",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannelEventAssociation": {
                          "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["calendarChannelEventAssociations"],
        "summary": "Delete One calendarChannelEventAssociation",
        "operationId": "deleteOneCalendarChannelEventAssociation",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarChannelEventAssociation": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["calendarChannelEventAssociations"],
        "summary": "Update One calendarChannelEventAssociation",
        "operationId": "UpdateOneCalendarChannelEventAssociation",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CalendarChannelEventAssociation for Update" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarChannelEventAssociation": {
                          "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarChannelEventAssociations/duplicates": {
      "post": {
        "tags": ["calendarChannelEventAssociations"],
        "summary": "Find calendarChannelEventAssociation Duplicates",
        "description": "**depth** can be provided to request your **calendarChannelEventAssociation**",
        "operationId": "findCalendarChannelEventAssociationDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/CalendarChannelEventAssociation" }
                  },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarEventParticipants": {
      "get": {
        "tags": ["calendarEventParticipants"],
        "summary": "Find Many calendarEventParticipants",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarEventParticipants**",
        "operationId": "findManyCalendarEventParticipants",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarEventParticipants": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarEventParticipant for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["calendarEventParticipants"],
        "summary": "Create One calendarEventParticipant",
        "operationId": "createOneCalendarEventParticipant",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarEventParticipant" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEventParticipant": {
                          "$ref": "#/components/schemas/CalendarEventParticipant for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/calendarEventParticipants": {
      "post": {
        "tags": ["calendarEventParticipants"],
        "summary": "Create Many calendarEventParticipants",
        "operationId": "createManyCalendarEventParticipants",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarEventParticipant" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEventParticipants": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/CalendarEventParticipant for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarEventParticipants/{id}": {
      "get": {
        "tags": ["calendarEventParticipants"],
        "summary": "Find One calendarEventParticipant",
        "description": "**depth** can be provided to request your **calendarEventParticipant**",
        "operationId": "findOneCalendarEventParticipant",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarEventParticipant": {
                          "$ref": "#/components/schemas/CalendarEventParticipant for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["calendarEventParticipants"],
        "summary": "Delete One calendarEventParticipant",
        "operationId": "deleteOneCalendarEventParticipant",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarEventParticipant": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["calendarEventParticipants"],
        "summary": "Update One calendarEventParticipant",
        "operationId": "UpdateOneCalendarEventParticipant",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CalendarEventParticipant for Update" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarEventParticipant": {
                          "$ref": "#/components/schemas/CalendarEventParticipant for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/calendarEventParticipants/duplicates": {
      "post": {
        "tags": ["calendarEventParticipants"],
        "summary": "Find calendarEventParticipant Duplicates",
        "description": "**depth** can be provided to request your **calendarEventParticipant**",
        "operationId": "findCalendarEventParticipantDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarEventParticipant" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/CalendarEventParticipant for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": ["companies"],
        "summary": "Find Many companies",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **companies**",
        "operationId": "findManyCompanies",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "companies": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Company for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["companies"],
        "summary": "Create One company",
        "operationId": "createOneCompany",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Company" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createCompany": { "$ref": "#/components/schemas/Company for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/companies": {
      "post": {
        "tags": ["companies"],
        "summary": "Create Many companies",
        "operationId": "createManyCompanies",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Company" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCompanies": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Company for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/companies/{id}": {
      "get": {
        "tags": ["companies"],
        "summary": "Find One company",
        "description": "**depth** can be provided to request your **company**",
        "operationId": "findOneCompany",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "company": { "$ref": "#/components/schemas/Company for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["companies"],
        "summary": "Delete One company",
        "operationId": "deleteOneCompany",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCompany": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["companies"],
        "summary": "Update One company",
        "operationId": "UpdateOneCompany",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Company for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateCompany": { "$ref": "#/components/schemas/Company for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/companies/duplicates": {
      "post": {
        "tags": ["companies"],
        "summary": "Find company Duplicates",
        "description": "**depth** can be provided to request your **company**",
        "operationId": "findCompanyDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Company" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Company for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/connectedAccounts": {
      "get": {
        "tags": ["connectedAccounts"],
        "summary": "Find Many connectedAccounts",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **connectedAccounts**",
        "operationId": "findManyConnectedAccounts",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "connectedAccounts": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["connectedAccounts"],
        "summary": "Create One connectedAccount",
        "operationId": "createOneConnectedAccount",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConnectedAccount" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createConnectedAccount": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/connectedAccounts": {
      "post": {
        "tags": ["connectedAccounts"],
        "summary": "Create Many connectedAccounts",
        "operationId": "createManyConnectedAccounts",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectedAccount" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createConnectedAccounts": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/connectedAccounts/{id}": {
      "get": {
        "tags": ["connectedAccounts"],
        "summary": "Find One connectedAccount",
        "description": "**depth** can be provided to request your **connectedAccount**",
        "operationId": "findOneConnectedAccount",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "connectedAccount": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["connectedAccounts"],
        "summary": "Delete One connectedAccount",
        "operationId": "deleteOneConnectedAccount",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteConnectedAccount": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["connectedAccounts"],
        "summary": "Update One connectedAccount",
        "operationId": "UpdateOneConnectedAccount",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConnectedAccount for Update" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateConnectedAccount": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/connectedAccounts/duplicates": {
      "post": {
        "tags": ["connectedAccounts"],
        "summary": "Find connectedAccount Duplicates",
        "description": "**depth** can be provided to request your **connectedAccount**",
        "operationId": "findConnectedAccountDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectedAccount" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/favorites": {
      "get": {
        "tags": ["favorites"],
        "summary": "Find Many favorites",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **favorites**",
        "operationId": "findManyFavorites",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "favorites": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Favorite for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["favorites"],
        "summary": "Create One favorite",
        "operationId": "createOneFavorite",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Favorite" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createFavorite": { "$ref": "#/components/schemas/Favorite for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/favorites": {
      "post": {
        "tags": ["favorites"],
        "summary": "Create Many favorites",
        "operationId": "createManyFavorites",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Favorite" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createFavorites": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Favorite for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/favorites/{id}": {
      "get": {
        "tags": ["favorites"],
        "summary": "Find One favorite",
        "description": "**depth** can be provided to request your **favorite**",
        "operationId": "findOneFavorite",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "favorite": { "$ref": "#/components/schemas/Favorite for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["favorites"],
        "summary": "Delete One favorite",
        "operationId": "deleteOneFavorite",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteFavorite": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["favorites"],
        "summary": "Update One favorite",
        "operationId": "UpdateOneFavorite",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Favorite for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateFavorite": { "$ref": "#/components/schemas/Favorite for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/favorites/duplicates": {
      "post": {
        "tags": ["favorites"],
        "summary": "Find favorite Duplicates",
        "description": "**depth** can be provided to request your **favorite**",
        "operationId": "findFavoriteDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Favorite" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Favorite for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/favoriteFolders": {
      "get": {
        "tags": ["favoriteFolders"],
        "summary": "Find Many favoriteFolders",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **favoriteFolders**",
        "operationId": "findManyFavoriteFolders",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "favoriteFolders": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/FavoriteFolder for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["favoriteFolders"],
        "summary": "Create One favoriteFolder",
        "operationId": "createOneFavoriteFolder",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FavoriteFolder" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createFavoriteFolder": { "$ref": "#/components/schemas/FavoriteFolder for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/favoriteFolders": {
      "post": {
        "tags": ["favoriteFolders"],
        "summary": "Create Many favoriteFolders",
        "operationId": "createManyFavoriteFolders",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FavoriteFolder" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createFavoriteFolders": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/FavoriteFolder for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/favoriteFolders/{id}": {
      "get": {
        "tags": ["favoriteFolders"],
        "summary": "Find One favoriteFolder",
        "description": "**depth** can be provided to request your **favoriteFolder**",
        "operationId": "findOneFavoriteFolder",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "favoriteFolder": { "$ref": "#/components/schemas/FavoriteFolder for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["favoriteFolders"],
        "summary": "Delete One favoriteFolder",
        "operationId": "deleteOneFavoriteFolder",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteFavoriteFolder": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["favoriteFolders"],
        "summary": "Update One favoriteFolder",
        "operationId": "UpdateOneFavoriteFolder",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FavoriteFolder for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateFavoriteFolder": { "$ref": "#/components/schemas/FavoriteFolder for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/favoriteFolders/duplicates": {
      "post": {
        "tags": ["favoriteFolders"],
        "summary": "Find favoriteFolder Duplicates",
        "description": "**depth** can be provided to request your **favoriteFolder**",
        "operationId": "findFavoriteFolderDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/FavoriteFolder" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/FavoriteFolder for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/timelineActivities": {
      "get": {
        "tags": ["timelineActivities"],
        "summary": "Find Many timelineActivities",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **timelineActivities**",
        "operationId": "findManyTimelineActivities",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "timelineActivities": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["timelineActivities"],
        "summary": "Create One timelineActivity",
        "operationId": "createOneTimelineActivity",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineActivity" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTimelineActivity": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/timelineActivities": {
      "post": {
        "tags": ["timelineActivities"],
        "summary": "Create Many timelineActivities",
        "operationId": "createManyTimelineActivities",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/TimelineActivity" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTimelineActivities": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/timelineActivities/{id}": {
      "get": {
        "tags": ["timelineActivities"],
        "summary": "Find One timelineActivity",
        "description": "**depth** can be provided to request your **timelineActivity**",
        "operationId": "findOneTimelineActivity",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "timelineActivity": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["timelineActivities"],
        "summary": "Delete One timelineActivity",
        "operationId": "deleteOneTimelineActivity",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteTimelineActivity": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["timelineActivities"],
        "summary": "Update One timelineActivity",
        "operationId": "UpdateOneTimelineActivity",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TimelineActivity for Update" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateTimelineActivity": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/timelineActivities/duplicates": {
      "post": {
        "tags": ["timelineActivities"],
        "summary": "Find timelineActivity Duplicates",
        "description": "**depth** can be provided to request your **timelineActivity**",
        "operationId": "findTimelineActivityDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/TimelineActivity" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFields": {
      "get": {
        "tags": ["viewFields"],
        "summary": "Find Many viewFields",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFields**",
        "operationId": "findManyViewFields",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFields": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewField for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["viewFields"],
        "summary": "Create One viewField",
        "operationId": "createOneViewField",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewField" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createViewField": { "$ref": "#/components/schemas/ViewField for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/viewFields": {
      "post": {
        "tags": ["viewFields"],
        "summary": "Create Many viewFields",
        "operationId": "createManyViewFields",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewField" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFields": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewField for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFields/{id}": {
      "get": {
        "tags": ["viewFields"],
        "summary": "Find One viewField",
        "description": "**depth** can be provided to request your **viewField**",
        "operationId": "findOneViewField",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "viewField": { "$ref": "#/components/schemas/ViewField for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["viewFields"],
        "summary": "Delete One viewField",
        "operationId": "deleteOneViewField",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewField": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["viewFields"],
        "summary": "Update One viewField",
        "operationId": "UpdateOneViewField",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewField for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateViewField": { "$ref": "#/components/schemas/ViewField for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFields/duplicates": {
      "post": {
        "tags": ["viewFields"],
        "summary": "Find viewField Duplicates",
        "description": "**depth** can be provided to request your **viewField**",
        "operationId": "findViewFieldDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/ViewField" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/ViewField for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewGroups": {
      "get": {
        "tags": ["viewGroups"],
        "summary": "Find Many viewGroups",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewGroups**",
        "operationId": "findManyViewGroups",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewGroups": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewGroup for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["viewGroups"],
        "summary": "Create One viewGroup",
        "operationId": "createOneViewGroup",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewGroup" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createViewGroup": { "$ref": "#/components/schemas/ViewGroup for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/viewGroups": {
      "post": {
        "tags": ["viewGroups"],
        "summary": "Create Many viewGroups",
        "operationId": "createManyViewGroups",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewGroup" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewGroups": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewGroup for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewGroups/{id}": {
      "get": {
        "tags": ["viewGroups"],
        "summary": "Find One viewGroup",
        "description": "**depth** can be provided to request your **viewGroup**",
        "operationId": "findOneViewGroup",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "viewGroup": { "$ref": "#/components/schemas/ViewGroup for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["viewGroups"],
        "summary": "Delete One viewGroup",
        "operationId": "deleteOneViewGroup",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewGroup": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["viewGroups"],
        "summary": "Update One viewGroup",
        "operationId": "UpdateOneViewGroup",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewGroup for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateViewGroup": { "$ref": "#/components/schemas/ViewGroup for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewGroups/duplicates": {
      "post": {
        "tags": ["viewGroups"],
        "summary": "Find viewGroup Duplicates",
        "description": "**depth** can be provided to request your **viewGroup**",
        "operationId": "findViewGroupDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/ViewGroup" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/ViewGroup for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFilters": {
      "get": {
        "tags": ["viewFilters"],
        "summary": "Find Many viewFilters",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFilters**",
        "operationId": "findManyViewFilters",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFilters": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewFilter for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["viewFilters"],
        "summary": "Create One viewFilter",
        "operationId": "createOneViewFilter",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewFilter" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createViewFilter": { "$ref": "#/components/schemas/ViewFilter for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/viewFilters": {
      "post": {
        "tags": ["viewFilters"],
        "summary": "Create Many viewFilters",
        "operationId": "createManyViewFilters",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewFilter" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFilters": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewFilter for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFilters/{id}": {
      "get": {
        "tags": ["viewFilters"],
        "summary": "Find One viewFilter",
        "description": "**depth** can be provided to request your **viewFilter**",
        "operationId": "findOneViewFilter",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "viewFilter": { "$ref": "#/components/schemas/ViewFilter for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["viewFilters"],
        "summary": "Delete One viewFilter",
        "operationId": "deleteOneViewFilter",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewFilter": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["viewFilters"],
        "summary": "Update One viewFilter",
        "operationId": "UpdateOneViewFilter",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewFilter for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateViewFilter": { "$ref": "#/components/schemas/ViewFilter for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFilters/duplicates": {
      "post": {
        "tags": ["viewFilters"],
        "summary": "Find viewFilter Duplicates",
        "description": "**depth** can be provided to request your **viewFilter**",
        "operationId": "findViewFilterDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/ViewFilter" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/ViewFilter for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFilterGroups": {
      "get": {
        "tags": ["viewFilterGroups"],
        "summary": "Find Many viewFilterGroups",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFilterGroups**",
        "operationId": "findManyViewFilterGroups",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFilterGroups": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["viewFilterGroups"],
        "summary": "Create One viewFilterGroup",
        "operationId": "createOneViewFilterGroup",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewFilterGroup" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFilterGroup": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/viewFilterGroups": {
      "post": {
        "tags": ["viewFilterGroups"],
        "summary": "Create Many viewFilterGroups",
        "operationId": "createManyViewFilterGroups",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewFilterGroup" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFilterGroups": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFilterGroups/{id}": {
      "get": {
        "tags": ["viewFilterGroups"],
        "summary": "Find One viewFilterGroup",
        "description": "**depth** can be provided to request your **viewFilterGroup**",
        "operationId": "findOneViewFilterGroup",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFilterGroup": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["viewFilterGroups"],
        "summary": "Delete One viewFilterGroup",
        "operationId": "deleteOneViewFilterGroup",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewFilterGroup": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["viewFilterGroups"],
        "summary": "Update One viewFilterGroup",
        "operationId": "UpdateOneViewFilterGroup",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewFilterGroup for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateViewFilterGroup": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewFilterGroups/duplicates": {
      "post": {
        "tags": ["viewFilterGroups"],
        "summary": "Find viewFilterGroup Duplicates",
        "description": "**depth** can be provided to request your **viewFilterGroup**",
        "operationId": "findViewFilterGroupDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/ViewFilterGroup" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewSorts": {
      "get": {
        "tags": ["viewSorts"],
        "summary": "Find Many viewSorts",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewSorts**",
        "operationId": "findManyViewSorts",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewSorts": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewSort for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["viewSorts"],
        "summary": "Create One viewSort",
        "operationId": "createOneViewSort",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewSort" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createViewSort": { "$ref": "#/components/schemas/ViewSort for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/viewSorts": {
      "post": {
        "tags": ["viewSorts"],
        "summary": "Create Many viewSorts",
        "operationId": "createManyViewSorts",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewSort" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewSorts": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/ViewSort for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewSorts/{id}": {
      "get": {
        "tags": ["viewSorts"],
        "summary": "Find One viewSort",
        "description": "**depth** can be provided to request your **viewSort**",
        "operationId": "findOneViewSort",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "viewSort": { "$ref": "#/components/schemas/ViewSort for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["viewSorts"],
        "summary": "Delete One viewSort",
        "operationId": "deleteOneViewSort",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewSort": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["viewSorts"],
        "summary": "Update One viewSort",
        "operationId": "UpdateOneViewSort",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ViewSort for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateViewSort": { "$ref": "#/components/schemas/ViewSort for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/viewSorts/duplicates": {
      "post": {
        "tags": ["viewSorts"],
        "summary": "Find viewSort Duplicates",
        "description": "**depth** can be provided to request your **viewSort**",
        "operationId": "findViewSortDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/ViewSort" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/ViewSort for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/views": {
      "get": {
        "tags": ["views"],
        "summary": "Find Many views",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **views**",
        "operationId": "findManyViews",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "views": { "type": "array", "items": { "$ref": "#/components/schemas/View for Response" } }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["views"],
        "summary": "Create One view",
        "operationId": "createOneView",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/View" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createView": { "$ref": "#/components/schemas/View for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/views": {
      "post": {
        "tags": ["views"],
        "summary": "Create Many views",
        "operationId": "createManyViews",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/View" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViews": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/View for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/views/{id}": {
      "get": {
        "tags": ["views"],
        "summary": "Find One view",
        "description": "**depth** can be provided to request your **view**",
        "operationId": "findOneView",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "view": { "$ref": "#/components/schemas/View for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["views"],
        "summary": "Delete One view",
        "operationId": "deleteOneView",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteView": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["views"],
        "summary": "Update One view",
        "operationId": "UpdateOneView",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/View for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateView": { "$ref": "#/components/schemas/View for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/views/duplicates": {
      "post": {
        "tags": ["views"],
        "summary": "Find view Duplicates",
        "description": "**depth** can be provided to request your **view**",
        "operationId": "findViewDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/View" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/View for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": ["webhooks"],
        "summary": "Find Many webhooks",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **webhooks**",
        "operationId": "findManyWebhooks",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "webhooks": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Webhook for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["webhooks"],
        "summary": "Create One webhook",
        "operationId": "createOneWebhook",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Webhook" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createWebhook": { "$ref": "#/components/schemas/Webhook for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/webhooks": {
      "post": {
        "tags": ["webhooks"],
        "summary": "Create Many webhooks",
        "operationId": "createManyWebhooks",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Webhook" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWebhooks": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Webhook for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": ["webhooks"],
        "summary": "Find One webhook",
        "description": "**depth** can be provided to request your **webhook**",
        "operationId": "findOneWebhook",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "webhook": { "$ref": "#/components/schemas/Webhook for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["webhooks"],
        "summary": "Delete One webhook",
        "operationId": "deleteOneWebhook",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWebhook": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["webhooks"],
        "summary": "Update One webhook",
        "operationId": "UpdateOneWebhook",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Webhook for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateWebhook": { "$ref": "#/components/schemas/Webhook for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/webhooks/duplicates": {
      "post": {
        "tags": ["webhooks"],
        "summary": "Find webhook Duplicates",
        "description": "**depth** can be provided to request your **webhook**",
        "operationId": "findWebhookDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Webhook" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Webhook for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflows": {
      "get": {
        "tags": ["workflows"],
        "summary": "Find Many workflows",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflows**",
        "operationId": "findManyWorkflows",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflows": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Workflow for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["workflows"],
        "summary": "Create One workflow",
        "operationId": "createOneWorkflow",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Workflow" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createWorkflow": { "$ref": "#/components/schemas/Workflow for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/workflows": {
      "post": {
        "tags": ["workflows"],
        "summary": "Create Many workflows",
        "operationId": "createManyWorkflows",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Workflow" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflows": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Workflow for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflows/{id}": {
      "get": {
        "tags": ["workflows"],
        "summary": "Find One workflow",
        "description": "**depth** can be provided to request your **workflow**",
        "operationId": "findOneWorkflow",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "workflow": { "$ref": "#/components/schemas/Workflow for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["workflows"],
        "summary": "Delete One workflow",
        "operationId": "deleteOneWorkflow",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflow": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["workflows"],
        "summary": "Update One workflow",
        "operationId": "UpdateOneWorkflow",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Workflow for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateWorkflow": { "$ref": "#/components/schemas/Workflow for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflows/duplicates": {
      "post": {
        "tags": ["workflows"],
        "summary": "Find workflow Duplicates",
        "description": "**depth** can be provided to request your **workflow**",
        "operationId": "findWorkflowDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Workflow" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Workflow for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowEventListeners": {
      "get": {
        "tags": ["workflowEventListeners"],
        "summary": "Find Many workflowEventListeners",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowEventListeners**",
        "operationId": "findManyWorkflowEventListeners",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowEventListeners": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowEventListener for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["workflowEventListeners"],
        "summary": "Create One workflowEventListener",
        "operationId": "createOneWorkflowEventListener",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowEventListener" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowEventListener": {
                          "$ref": "#/components/schemas/WorkflowEventListener for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/workflowEventListeners": {
      "post": {
        "tags": ["workflowEventListeners"],
        "summary": "Create Many workflowEventListeners",
        "operationId": "createManyWorkflowEventListeners",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowEventListener" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowEventListeners": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowEventListener for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowEventListeners/{id}": {
      "get": {
        "tags": ["workflowEventListeners"],
        "summary": "Find One workflowEventListener",
        "description": "**depth** can be provided to request your **workflowEventListener**",
        "operationId": "findOneWorkflowEventListener",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowEventListener": { "$ref": "#/components/schemas/WorkflowEventListener for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["workflowEventListeners"],
        "summary": "Delete One workflowEventListener",
        "operationId": "deleteOneWorkflowEventListener",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflowEventListener": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["workflowEventListeners"],
        "summary": "Update One workflowEventListener",
        "operationId": "UpdateOneWorkflowEventListener",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowEventListener for Update" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkflowEventListener": {
                          "$ref": "#/components/schemas/WorkflowEventListener for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowEventListeners/duplicates": {
      "post": {
        "tags": ["workflowEventListeners"],
        "summary": "Find workflowEventListener Duplicates",
        "description": "**depth** can be provided to request your **workflowEventListener**",
        "operationId": "findWorkflowEventListenerDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowEventListener" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/WorkflowEventListener for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowVersions": {
      "get": {
        "tags": ["workflowVersions"],
        "summary": "Find Many workflowVersions",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowVersions**",
        "operationId": "findManyWorkflowVersions",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowVersions": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["workflowVersions"],
        "summary": "Create One workflowVersion",
        "operationId": "createOneWorkflowVersion",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowVersion" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowVersion": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/workflowVersions": {
      "post": {
        "tags": ["workflowVersions"],
        "summary": "Create Many workflowVersions",
        "operationId": "createManyWorkflowVersions",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowVersion" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowVersions": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowVersions/{id}": {
      "get": {
        "tags": ["workflowVersions"],
        "summary": "Find One workflowVersion",
        "description": "**depth** can be provided to request your **workflowVersion**",
        "operationId": "findOneWorkflowVersion",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowVersion": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["workflowVersions"],
        "summary": "Delete One workflowVersion",
        "operationId": "deleteOneWorkflowVersion",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflowVersion": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["workflowVersions"],
        "summary": "Update One workflowVersion",
        "operationId": "UpdateOneWorkflowVersion",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowVersion for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkflowVersion": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowVersions/duplicates": {
      "post": {
        "tags": ["workflowVersions"],
        "summary": "Find workflowVersion Duplicates",
        "description": "**depth** can be provided to request your **workflowVersion**",
        "operationId": "findWorkflowVersionDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowVersion" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowRuns": {
      "get": {
        "tags": ["workflowRuns"],
        "summary": "Find Many workflowRuns",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowRuns**",
        "operationId": "findManyWorkflowRuns",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowRuns": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowRun for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["workflowRuns"],
        "summary": "Create One workflowRun",
        "operationId": "createOneWorkflowRun",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowRun" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createWorkflowRun": { "$ref": "#/components/schemas/WorkflowRun for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/workflowRuns": {
      "post": {
        "tags": ["workflowRuns"],
        "summary": "Create Many workflowRuns",
        "operationId": "createManyWorkflowRuns",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowRun" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowRuns": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowRun for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowRuns/{id}": {
      "get": {
        "tags": ["workflowRuns"],
        "summary": "Find One workflowRun",
        "description": "**depth** can be provided to request your **workflowRun**",
        "operationId": "findOneWorkflowRun",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "workflowRun": { "$ref": "#/components/schemas/WorkflowRun for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["workflowRuns"],
        "summary": "Delete One workflowRun",
        "operationId": "deleteOneWorkflowRun",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflowRun": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["workflowRuns"],
        "summary": "Update One workflowRun",
        "operationId": "UpdateOneWorkflowRun",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowRun for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateWorkflowRun": { "$ref": "#/components/schemas/WorkflowRun for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowRuns/duplicates": {
      "post": {
        "tags": ["workflowRuns"],
        "summary": "Find workflowRun Duplicates",
        "description": "**depth** can be provided to request your **workflowRun**",
        "operationId": "findWorkflowRunDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowRun" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/WorkflowRun for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowAutomatedTriggers": {
      "get": {
        "tags": ["workflowAutomatedTriggers"],
        "summary": "Find Many workflowAutomatedTriggers",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowAutomatedTriggers**",
        "operationId": "findManyWorkflowAutomatedTriggers",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowAutomatedTriggers": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["workflowAutomatedTriggers"],
        "summary": "Create One workflowAutomatedTrigger",
        "operationId": "createOneWorkflowAutomatedTrigger",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowAutomatedTrigger": {
                          "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/workflowAutomatedTriggers": {
      "post": {
        "tags": ["workflowAutomatedTriggers"],
        "summary": "Create Many workflowAutomatedTriggers",
        "operationId": "createManyWorkflowAutomatedTriggers",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowAutomatedTriggers": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowAutomatedTriggers/{id}": {
      "get": {
        "tags": ["workflowAutomatedTriggers"],
        "summary": "Find One workflowAutomatedTrigger",
        "description": "**depth** can be provided to request your **workflowAutomatedTrigger**",
        "operationId": "findOneWorkflowAutomatedTrigger",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowAutomatedTrigger": {
                          "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["workflowAutomatedTriggers"],
        "summary": "Delete One workflowAutomatedTrigger",
        "operationId": "deleteOneWorkflowAutomatedTrigger",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflowAutomatedTrigger": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["workflowAutomatedTriggers"],
        "summary": "Update One workflowAutomatedTrigger",
        "operationId": "UpdateOneWorkflowAutomatedTrigger",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Update" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkflowAutomatedTrigger": {
                          "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workflowAutomatedTriggers/duplicates": {
      "post": {
        "tags": ["workflowAutomatedTriggers"],
        "summary": "Find workflowAutomatedTrigger Duplicates",
        "description": "**depth** can be provided to request your **workflowAutomatedTrigger**",
        "operationId": "findWorkflowAutomatedTriggerDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workspaceMembers": {
      "get": {
        "tags": ["workspaceMembers"],
        "summary": "Find Many workspaceMembers",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workspaceMembers**",
        "operationId": "findManyWorkspaceMembers",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workspaceMembers": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["workspaceMembers"],
        "summary": "Create One workspaceMember",
        "operationId": "createOneWorkspaceMember",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkspaceMember" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkspaceMember": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/workspaceMembers": {
      "post": {
        "tags": ["workspaceMembers"],
        "summary": "Create Many workspaceMembers",
        "operationId": "createManyWorkspaceMembers",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkspaceMember" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkspaceMembers": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workspaceMembers/{id}": {
      "get": {
        "tags": ["workspaceMembers"],
        "summary": "Find One workspaceMember",
        "description": "**depth** can be provided to request your **workspaceMember**",
        "operationId": "findOneWorkspaceMember",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workspaceMember": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["workspaceMembers"],
        "summary": "Delete One workspaceMember",
        "operationId": "deleteOneWorkspaceMember",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkspaceMember": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["workspaceMembers"],
        "summary": "Update One workspaceMember",
        "operationId": "UpdateOneWorkspaceMember",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkspaceMember for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkspaceMember": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/workspaceMembers/duplicates": {
      "post": {
        "tags": ["workspaceMembers"],
        "summary": "Find workspaceMember Duplicates",
        "description": "**depth** can be provided to request your **workspaceMember**",
        "operationId": "findWorkspaceMemberDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/WorkspaceMember" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageThreads": {
      "get": {
        "tags": ["messageThreads"],
        "summary": "Find Many messageThreads",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageThreads**",
        "operationId": "findManyMessageThreads",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageThreads": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageThread for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["messageThreads"],
        "summary": "Create One messageThread",
        "operationId": "createOneMessageThread",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageThread" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageThread": { "$ref": "#/components/schemas/MessageThread for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/messageThreads": {
      "post": {
        "tags": ["messageThreads"],
        "summary": "Create Many messageThreads",
        "operationId": "createManyMessageThreads",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/MessageThread" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageThreads": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageThread for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageThreads/{id}": {
      "get": {
        "tags": ["messageThreads"],
        "summary": "Find One messageThread",
        "description": "**depth** can be provided to request your **messageThread**",
        "operationId": "findOneMessageThread",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "messageThread": { "$ref": "#/components/schemas/MessageThread for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["messageThreads"],
        "summary": "Delete One messageThread",
        "operationId": "deleteOneMessageThread",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageThread": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["messageThreads"],
        "summary": "Update One messageThread",
        "operationId": "UpdateOneMessageThread",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageThread for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageThread": { "$ref": "#/components/schemas/MessageThread for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageThreads/duplicates": {
      "post": {
        "tags": ["messageThreads"],
        "summary": "Find messageThread Duplicates",
        "description": "**depth** can be provided to request your **messageThread**",
        "operationId": "findMessageThreadDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/MessageThread" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/MessageThread for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messages": {
      "get": {
        "tags": ["messages"],
        "summary": "Find Many messages",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messages**",
        "operationId": "findManyMessages",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Message for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["messages"],
        "summary": "Create One message",
        "operationId": "createOneMessage",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Message" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createMessage": { "$ref": "#/components/schemas/Message for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/messages": {
      "post": {
        "tags": ["messages"],
        "summary": "Create Many messages",
        "operationId": "createManyMessages",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Message" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessages": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Message for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": ["messages"],
        "summary": "Find One message",
        "description": "**depth** can be provided to request your **message**",
        "operationId": "findOneMessage",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "message": { "$ref": "#/components/schemas/Message for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["messages"],
        "summary": "Delete One message",
        "operationId": "deleteOneMessage",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessage": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["messages"],
        "summary": "Update One message",
        "operationId": "UpdateOneMessage",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Message for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateMessage": { "$ref": "#/components/schemas/Message for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messages/duplicates": {
      "post": {
        "tags": ["messages"],
        "summary": "Find message Duplicates",
        "description": "**depth** can be provided to request your **message**",
        "operationId": "findMessageDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Message" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Message for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageChannels": {
      "get": {
        "tags": ["messageChannels"],
        "summary": "Find Many messageChannels",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageChannels**",
        "operationId": "findManyMessageChannels",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageChannels": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageChannel for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["messageChannels"],
        "summary": "Create One messageChannel",
        "operationId": "createOneMessageChannel",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageChannel" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannel": { "$ref": "#/components/schemas/MessageChannel for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/messageChannels": {
      "post": {
        "tags": ["messageChannels"],
        "summary": "Create Many messageChannels",
        "operationId": "createManyMessageChannels",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/MessageChannel" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannels": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageChannel for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageChannels/{id}": {
      "get": {
        "tags": ["messageChannels"],
        "summary": "Find One messageChannel",
        "description": "**depth** can be provided to request your **messageChannel**",
        "operationId": "findOneMessageChannel",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "messageChannel": { "$ref": "#/components/schemas/MessageChannel for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["messageChannels"],
        "summary": "Delete One messageChannel",
        "operationId": "deleteOneMessageChannel",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageChannel": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["messageChannels"],
        "summary": "Update One messageChannel",
        "operationId": "UpdateOneMessageChannel",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageChannel for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageChannel": { "$ref": "#/components/schemas/MessageChannel for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageChannels/duplicates": {
      "post": {
        "tags": ["messageChannels"],
        "summary": "Find messageChannel Duplicates",
        "description": "**depth** can be provided to request your **messageChannel**",
        "operationId": "findMessageChannelDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/MessageChannel" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/MessageChannel for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageParticipants": {
      "get": {
        "tags": ["messageParticipants"],
        "summary": "Find Many messageParticipants",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageParticipants**",
        "operationId": "findManyMessageParticipants",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageParticipants": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["messageParticipants"],
        "summary": "Create One messageParticipant",
        "operationId": "createOneMessageParticipant",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageParticipant" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageParticipant": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/messageParticipants": {
      "post": {
        "tags": ["messageParticipants"],
        "summary": "Create Many messageParticipants",
        "operationId": "createManyMessageParticipants",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/MessageParticipant" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageParticipants": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageParticipants/{id}": {
      "get": {
        "tags": ["messageParticipants"],
        "summary": "Find One messageParticipant",
        "description": "**depth** can be provided to request your **messageParticipant**",
        "operationId": "findOneMessageParticipant",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageParticipant": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["messageParticipants"],
        "summary": "Delete One messageParticipant",
        "operationId": "deleteOneMessageParticipant",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageParticipant": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["messageParticipants"],
        "summary": "Update One messageParticipant",
        "operationId": "UpdateOneMessageParticipant",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MessageParticipant for Update" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageParticipant": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageParticipants/duplicates": {
      "post": {
        "tags": ["messageParticipants"],
        "summary": "Find messageParticipant Duplicates",
        "description": "**depth** can be provided to request your **messageParticipant**",
        "operationId": "findMessageParticipantDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/MessageParticipant" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageFolders": {
      "get": {
        "tags": ["messageFolders"],
        "summary": "Find Many messageFolders",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageFolders**",
        "operationId": "findManyMessageFolders",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageFolders": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageFolder for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["messageFolders"],
        "summary": "Create One messageFolder",
        "operationId": "createOneMessageFolder",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageFolder" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageFolder": { "$ref": "#/components/schemas/MessageFolder for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/messageFolders": {
      "post": {
        "tags": ["messageFolders"],
        "summary": "Create Many messageFolders",
        "operationId": "createManyMessageFolders",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/MessageFolder" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageFolders": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageFolder for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageFolders/{id}": {
      "get": {
        "tags": ["messageFolders"],
        "summary": "Find One messageFolder",
        "description": "**depth** can be provided to request your **messageFolder**",
        "operationId": "findOneMessageFolder",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "messageFolder": { "$ref": "#/components/schemas/MessageFolder for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["messageFolders"],
        "summary": "Delete One messageFolder",
        "operationId": "deleteOneMessageFolder",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageFolder": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["messageFolders"],
        "summary": "Update One messageFolder",
        "operationId": "UpdateOneMessageFolder",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageFolder for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageFolder": { "$ref": "#/components/schemas/MessageFolder for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageFolders/duplicates": {
      "post": {
        "tags": ["messageFolders"],
        "summary": "Find messageFolder Duplicates",
        "description": "**depth** can be provided to request your **messageFolder**",
        "operationId": "findMessageFolderDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/MessageFolder" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/MessageFolder for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageChannelMessageAssociations": {
      "get": {
        "tags": ["messageChannelMessageAssociations"],
        "summary": "Find Many messageChannelMessageAssociations",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageChannelMessageAssociations**",
        "operationId": "findManyMessageChannelMessageAssociations",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageChannelMessageAssociations": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["messageChannelMessageAssociations"],
        "summary": "Create One messageChannelMessageAssociation",
        "operationId": "createOneMessageChannelMessageAssociation",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MessageChannelMessageAssociation" } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannelMessageAssociation": {
                          "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/messageChannelMessageAssociations": {
      "post": {
        "tags": ["messageChannelMessageAssociations"],
        "summary": "Create Many messageChannelMessageAssociations",
        "operationId": "createManyMessageChannelMessageAssociations",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/MessageChannelMessageAssociation" }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannelMessageAssociations": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageChannelMessageAssociations/{id}": {
      "get": {
        "tags": ["messageChannelMessageAssociations"],
        "summary": "Find One messageChannelMessageAssociation",
        "description": "**depth** can be provided to request your **messageChannelMessageAssociation**",
        "operationId": "findOneMessageChannelMessageAssociation",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageChannelMessageAssociation": {
                          "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["messageChannelMessageAssociations"],
        "summary": "Delete One messageChannelMessageAssociation",
        "operationId": "deleteOneMessageChannelMessageAssociation",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageChannelMessageAssociation": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["messageChannelMessageAssociations"],
        "summary": "Update One messageChannelMessageAssociation",
        "operationId": "UpdateOneMessageChannelMessageAssociation",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessageChannelMessageAssociation for Update" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageChannelMessageAssociation": {
                          "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/messageChannelMessageAssociations/duplicates": {
      "post": {
        "tags": ["messageChannelMessageAssociations"],
        "summary": "Find messageChannelMessageAssociation Duplicates",
        "description": "**depth** can be provided to request your **messageChannelMessageAssociation**",
        "operationId": "findMessageChannelMessageAssociationDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/MessageChannelMessageAssociation" }
                  },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": ["notes"],
        "summary": "Find Many notes",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **notes**",
        "operationId": "findManyNotes",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "notes": { "type": "array", "items": { "$ref": "#/components/schemas/Note for Response" } }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["notes"],
        "summary": "Create One note",
        "operationId": "createOneNote",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createNote": { "$ref": "#/components/schemas/Note for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/notes": {
      "post": {
        "tags": ["notes"],
        "summary": "Create Many notes",
        "operationId": "createManyNotes",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Note" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createNotes": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Note for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/notes/{id}": {
      "get": {
        "tags": ["notes"],
        "summary": "Find One note",
        "description": "**depth** can be provided to request your **note**",
        "operationId": "findOneNote",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "note": { "$ref": "#/components/schemas/Note for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["notes"],
        "summary": "Delete One note",
        "operationId": "deleteOneNote",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteNote": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["notes"],
        "summary": "Update One note",
        "operationId": "UpdateOneNote",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateNote": { "$ref": "#/components/schemas/Note for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/notes/duplicates": {
      "post": {
        "tags": ["notes"],
        "summary": "Find note Duplicates",
        "description": "**depth** can be provided to request your **note**",
        "operationId": "findNoteDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Note" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Note for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/noteTargets": {
      "get": {
        "tags": ["noteTargets"],
        "summary": "Find Many noteTargets",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **noteTargets**",
        "operationId": "findManyNoteTargets",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "noteTargets": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/NoteTarget for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["noteTargets"],
        "summary": "Create One noteTarget",
        "operationId": "createOneNoteTarget",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NoteTarget" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createNoteTarget": { "$ref": "#/components/schemas/NoteTarget for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/noteTargets": {
      "post": {
        "tags": ["noteTargets"],
        "summary": "Create Many noteTargets",
        "operationId": "createManyNoteTargets",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/NoteTarget" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createNoteTargets": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/NoteTarget for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/noteTargets/{id}": {
      "get": {
        "tags": ["noteTargets"],
        "summary": "Find One noteTarget",
        "description": "**depth** can be provided to request your **noteTarget**",
        "operationId": "findOneNoteTarget",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "noteTarget": { "$ref": "#/components/schemas/NoteTarget for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["noteTargets"],
        "summary": "Delete One noteTarget",
        "operationId": "deleteOneNoteTarget",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteNoteTarget": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["noteTargets"],
        "summary": "Update One noteTarget",
        "operationId": "UpdateOneNoteTarget",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NoteTarget for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateNoteTarget": { "$ref": "#/components/schemas/NoteTarget for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/noteTargets/duplicates": {
      "post": {
        "tags": ["noteTargets"],
        "summary": "Find noteTarget Duplicates",
        "description": "**depth** can be provided to request your **noteTarget**",
        "operationId": "findNoteTargetDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/NoteTarget" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/NoteTarget for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/opportunities": {
      "get": {
        "tags": ["opportunities"],
        "summary": "Find Many opportunities",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **opportunities**",
        "operationId": "findManyOpportunities",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "opportunities": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Opportunity for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["opportunities"],
        "summary": "Create One opportunity",
        "operationId": "createOneOpportunity",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Opportunity" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createOpportunity": { "$ref": "#/components/schemas/Opportunity for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/opportunities": {
      "post": {
        "tags": ["opportunities"],
        "summary": "Create Many opportunities",
        "operationId": "createManyOpportunities",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Opportunity" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createOpportunities": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Opportunity for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/opportunities/{id}": {
      "get": {
        "tags": ["opportunities"],
        "summary": "Find One opportunity",
        "description": "**depth** can be provided to request your **opportunity**",
        "operationId": "findOneOpportunity",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "opportunity": { "$ref": "#/components/schemas/Opportunity for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["opportunities"],
        "summary": "Delete One opportunity",
        "operationId": "deleteOneOpportunity",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteOpportunity": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["opportunities"],
        "summary": "Update One opportunity",
        "operationId": "UpdateOneOpportunity",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Opportunity for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateOpportunity": { "$ref": "#/components/schemas/Opportunity for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/opportunities/duplicates": {
      "post": {
        "tags": ["opportunities"],
        "summary": "Find opportunity Duplicates",
        "description": "**depth** can be provided to request your **opportunity**",
        "operationId": "findOpportunityDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Opportunity" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Opportunity for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/people": {
      "get": {
        "tags": ["people"],
        "summary": "Find Many people",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **people**",
        "operationId": "findManyPeople",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "people": { "type": "array", "items": { "$ref": "#/components/schemas/Person for Response" } }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["people"],
        "summary": "Create One person",
        "operationId": "createOnePerson",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Person" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createPerson": { "$ref": "#/components/schemas/Person for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/people": {
      "post": {
        "tags": ["people"],
        "summary": "Create Many people",
        "operationId": "createManyPeople",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Person" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createPeople": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Person for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/people/{id}": {
      "get": {
        "tags": ["people"],
        "summary": "Find One person",
        "description": "**depth** can be provided to request your **person**",
        "operationId": "findOnePerson",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "person": { "$ref": "#/components/schemas/Person for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["people"],
        "summary": "Delete One person",
        "operationId": "deleteOnePerson",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deletePerson": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["people"],
        "summary": "Update One person",
        "operationId": "UpdateOnePerson",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Person for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updatePerson": { "$ref": "#/components/schemas/Person for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/people/duplicates": {
      "post": {
        "tags": ["people"],
        "summary": "Find person Duplicates",
        "description": "**depth** can be provided to request your **person**",
        "operationId": "findPersonDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Person" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Person for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": ["tasks"],
        "summary": "Find Many tasks",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **tasks**",
        "operationId": "findManyTasks",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tasks": { "type": "array", "items": { "$ref": "#/components/schemas/Task for Response" } }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["tasks"],
        "summary": "Create One task",
        "operationId": "createOneTask",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Task" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createTask": { "$ref": "#/components/schemas/Task for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/tasks": {
      "post": {
        "tags": ["tasks"],
        "summary": "Create Many tasks",
        "operationId": "createManyTasks",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Task" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTasks": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/Task for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["tasks"],
        "summary": "Find One task",
        "description": "**depth** can be provided to request your **task**",
        "operationId": "findOneTask",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "task": { "$ref": "#/components/schemas/Task for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["tasks"],
        "summary": "Delete One task",
        "operationId": "deleteOneTask",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteTask": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["tasks"],
        "summary": "Update One task",
        "operationId": "UpdateOneTask",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Task for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateTask": { "$ref": "#/components/schemas/Task for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/tasks/duplicates": {
      "post": {
        "tags": ["tasks"],
        "summary": "Find task Duplicates",
        "description": "**depth** can be provided to request your **task**",
        "operationId": "findTaskDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Task" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Task for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/taskTargets": {
      "get": {
        "tags": ["taskTargets"],
        "summary": "Find Many taskTargets",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **taskTargets**",
        "operationId": "findManyTaskTargets",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "taskTargets": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/TaskTarget for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["taskTargets"],
        "summary": "Create One taskTarget",
        "operationId": "createOneTaskTarget",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TaskTarget" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createTaskTarget": { "$ref": "#/components/schemas/TaskTarget for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/taskTargets": {
      "post": {
        "tags": ["taskTargets"],
        "summary": "Create Many taskTargets",
        "operationId": "createManyTaskTargets",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/TaskTarget" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTaskTargets": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/TaskTarget for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/taskTargets/{id}": {
      "get": {
        "tags": ["taskTargets"],
        "summary": "Find One taskTarget",
        "description": "**depth** can be provided to request your **taskTarget**",
        "operationId": "findOneTaskTarget",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "taskTarget": { "$ref": "#/components/schemas/TaskTarget for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["taskTargets"],
        "summary": "Delete One taskTarget",
        "operationId": "deleteOneTaskTarget",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteTaskTarget": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["taskTargets"],
        "summary": "Update One taskTarget",
        "operationId": "UpdateOneTaskTarget",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TaskTarget for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updateTaskTarget": { "$ref": "#/components/schemas/TaskTarget for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/taskTargets/duplicates": {
      "post": {
        "tags": ["taskTargets"],
        "summary": "Find taskTarget Duplicates",
        "description": "**depth** can be provided to request your **taskTarget**",
        "operationId": "findTaskTargetDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/TaskTarget" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/TaskTarget for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/pets": {
      "get": {
        "tags": ["pets"],
        "summary": "Find Many pets",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **pets**",
        "operationId": "findManyPets",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "pets": { "type": "array", "items": { "$ref": "#/components/schemas/Pet for Response" } }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["pets"],
        "summary": "Create One pet",
        "operationId": "createOnePet",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Pet" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "createPet": { "$ref": "#/components/schemas/Pet for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/pets": {
      "post": {
        "tags": ["pets"],
        "summary": "Create Many pets",
        "operationId": "createManyPets",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Pet" } } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createPets": { "type": "array", "items": { "$ref": "#/components/schemas/Pet for Response" } }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/pets/{id}": {
      "get": {
        "tags": ["pets"],
        "summary": "Find One pet",
        "description": "**depth** can be provided to request your **pet**",
        "operationId": "findOnePet",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "pet": { "$ref": "#/components/schemas/Pet for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["pets"],
        "summary": "Delete One pet",
        "operationId": "deleteOnePet",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deletePet": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["pets"],
        "summary": "Update One pet",
        "operationId": "UpdateOnePet",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Pet for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "updatePet": { "$ref": "#/components/schemas/Pet for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/pets/duplicates": {
      "post": {
        "tags": ["pets"],
        "summary": "Find pet Duplicates",
        "description": "**depth** can be provided to request your **pet**",
        "operationId": "findPetDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/Pet" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/Pet for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/surveyResults": {
      "get": {
        "tags": ["surveyResults"],
        "summary": "Find Many surveyResults",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **surveyResults**",
        "operationId": "findManySurveyResults",
        "parameters": [
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/filter" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/depth" },
          { "$ref": "#/components/parameters/startingAfter" },
          { "$ref": "#/components/parameters/endingBefore" }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "surveyResults": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/SurveyResult for Response" }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": { "type": "boolean" },
                        "startCursor": { "type": "string", "format": "uuid" },
                        "endCursor": { "type": "string", "format": "uuid" }
                      }
                    },
                    "totalCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "post": {
        "tags": ["surveyResults"],
        "summary": "Create One surveyResult",
        "operationId": "createOneSurveyResult",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SurveyResult" } } }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createSurveyResult": { "$ref": "#/components/schemas/SurveyResult for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/batch/surveyResults": {
      "post": {
        "tags": ["surveyResults"],
        "summary": "Create Many surveyResults",
        "operationId": "createManySurveyResults",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/SurveyResult" } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createSurveyResults": {
                          "type": "array",
                          "items": { "$ref": "#/components/schemas/SurveyResult for Response" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/surveyResults/{id}": {
      "get": {
        "tags": ["surveyResults"],
        "summary": "Find One surveyResult",
        "description": "**depth** can be provided to request your **surveyResult**",
        "operationId": "findOneSurveyResult",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": { "surveyResult": { "$ref": "#/components/schemas/SurveyResult for Response" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["surveyResults"],
        "summary": "Delete One surveyResult",
        "operationId": "deleteOneSurveyResult",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteSurveyResult": {
                          "type": "object",
                          "properties": { "id": { "type": "string", "format": "uuid" } }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "patch": {
        "tags": ["surveyResults"],
        "summary": "Update One surveyResult",
        "operationId": "UpdateOneSurveyResult",
        "parameters": [{ "$ref": "#/components/parameters/idPath" }, { "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SurveyResult for Update" } } }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateSurveyResult": { "$ref": "#/components/schemas/SurveyResult for Response" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/surveyResults/duplicates": {
      "post": {
        "tags": ["surveyResults"],
        "summary": "Find surveyResult Duplicates",
        "description": "**depth** can be provided to request your **surveyResult**",
        "operationId": "findSurveyResultDuplicates",
        "parameters": [{ "$ref": "#/components/parameters/depth" }],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "array", "items": { "$ref": "#/components/schemas/SurveyResult" } },
                  "ids": { "type": "array" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": { "type": "number" },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": { "type": "boolean" },
                              "startCursor": { "type": "string", "format": "uuid" },
                              "endCursor": { "type": "string", "format": "uuid" }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/SurveyResult for Response" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/400" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    }
  },
  "webhooks": {
    "ApiKey Created": {
      "post": {
        "tags": ["apiKey"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "apiKey.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["apiKey"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ApiKey for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ApiKey Updated": {
      "post": {
        "tags": ["apiKey"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "apiKey.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["apiKey"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ApiKey for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ApiKey Deleted": {
      "post": {
        "tags": ["apiKey"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "apiKey.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["apiKey"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ApiKey for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Attachment Created": {
      "post": {
        "tags": ["attachment"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "attachment.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["attachment"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Attachment for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Attachment Updated": {
      "post": {
        "tags": ["attachment"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "attachment.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["attachment"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Attachment for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Attachment Deleted": {
      "post": {
        "tags": ["attachment"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "attachment.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["attachment"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Attachment for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Blocklist Created": {
      "post": {
        "tags": ["blocklist"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "blocklist.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["blocklist"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Blocklist for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Blocklist Updated": {
      "post": {
        "tags": ["blocklist"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "blocklist.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["blocklist"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Blocklist for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Blocklist Deleted": {
      "post": {
        "tags": ["blocklist"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "blocklist.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["blocklist"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Blocklist for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarEvent Created": {
      "post": {
        "tags": ["calendarEvent"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarEvent.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarEvent"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarEvent for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarEvent Updated": {
      "post": {
        "tags": ["calendarEvent"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarEvent.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarEvent"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarEvent for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarEvent Deleted": {
      "post": {
        "tags": ["calendarEvent"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarEvent.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarEvent"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarEvent for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarChannel Created": {
      "post": {
        "tags": ["calendarChannel"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarChannel.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarChannel"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarChannel Updated": {
      "post": {
        "tags": ["calendarChannel"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarChannel.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarChannel"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarChannel for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarChannel Deleted": {
      "post": {
        "tags": ["calendarChannel"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarChannel.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarChannel"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarChannel for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarChannelEventAssociation Created": {
      "post": {
        "tags": ["calendarChannelEventAssociation"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarChannelEventAssociation.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarChannelEventAssociation"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarChannelEventAssociation Updated": {
      "post": {
        "tags": ["calendarChannelEventAssociation"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarChannelEventAssociation.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarChannelEventAssociation"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarChannelEventAssociation Deleted": {
      "post": {
        "tags": ["calendarChannelEventAssociation"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarChannelEventAssociation.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarChannelEventAssociation"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarChannelEventAssociation for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarEventParticipant Created": {
      "post": {
        "tags": ["calendarEventParticipant"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarEventParticipant.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarEventParticipant"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarEventParticipant for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarEventParticipant Updated": {
      "post": {
        "tags": ["calendarEventParticipant"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarEventParticipant.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarEventParticipant"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarEventParticipant for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "CalendarEventParticipant Deleted": {
      "post": {
        "tags": ["calendarEventParticipant"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "calendarEventParticipant.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["calendarEventParticipant"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/CalendarEventParticipant for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Company Created": {
      "post": {
        "tags": ["company"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "company.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["company"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Company for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Company Updated": {
      "post": {
        "tags": ["company"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "company.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["company"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Company for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Company Deleted": {
      "post": {
        "tags": ["company"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "company.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["company"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Company for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ConnectedAccount Created": {
      "post": {
        "tags": ["connectedAccount"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "connectedAccount.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["connectedAccount"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ConnectedAccount Updated": {
      "post": {
        "tags": ["connectedAccount"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "connectedAccount.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["connectedAccount"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ConnectedAccount for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ConnectedAccount Deleted": {
      "post": {
        "tags": ["connectedAccount"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "connectedAccount.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["connectedAccount"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ConnectedAccount for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Favorite Created": {
      "post": {
        "tags": ["favorite"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "favorite.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["favorite"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Favorite for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Favorite Updated": {
      "post": {
        "tags": ["favorite"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "favorite.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["favorite"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Favorite for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Favorite Deleted": {
      "post": {
        "tags": ["favorite"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "favorite.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["favorite"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Favorite for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "FavoriteFolder Created": {
      "post": {
        "tags": ["favoriteFolder"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "favoriteFolder.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["favoriteFolder"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/FavoriteFolder for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "FavoriteFolder Updated": {
      "post": {
        "tags": ["favoriteFolder"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "favoriteFolder.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["favoriteFolder"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/FavoriteFolder for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "FavoriteFolder Deleted": {
      "post": {
        "tags": ["favoriteFolder"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "favoriteFolder.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["favoriteFolder"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/FavoriteFolder for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "TimelineActivity Created": {
      "post": {
        "tags": ["timelineActivity"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "timelineActivity.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["timelineActivity"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "TimelineActivity Updated": {
      "post": {
        "tags": ["timelineActivity"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "timelineActivity.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["timelineActivity"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/TimelineActivity for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "TimelineActivity Deleted": {
      "post": {
        "tags": ["timelineActivity"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "timelineActivity.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["timelineActivity"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/TimelineActivity for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewField Created": {
      "post": {
        "tags": ["viewField"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewField.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewField"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewField for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewField Updated": {
      "post": {
        "tags": ["viewField"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewField.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewField"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewField for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewField Deleted": {
      "post": {
        "tags": ["viewField"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewField.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewField"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewField for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewGroup Created": {
      "post": {
        "tags": ["viewGroup"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewGroup.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewGroup"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewGroup for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewGroup Updated": {
      "post": {
        "tags": ["viewGroup"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewGroup.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewGroup"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewGroup for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewGroup Deleted": {
      "post": {
        "tags": ["viewGroup"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewGroup.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewGroup"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewGroup for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewFilter Created": {
      "post": {
        "tags": ["viewFilter"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewFilter.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewFilter"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewFilter for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewFilter Updated": {
      "post": {
        "tags": ["viewFilter"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewFilter.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewFilter"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewFilter for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewFilter Deleted": {
      "post": {
        "tags": ["viewFilter"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewFilter.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewFilter"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewFilter for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewFilterGroup Created": {
      "post": {
        "tags": ["viewFilterGroup"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewFilterGroup.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewFilterGroup"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewFilterGroup Updated": {
      "post": {
        "tags": ["viewFilterGroup"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewFilterGroup.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewFilterGroup"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewFilterGroup for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewFilterGroup Deleted": {
      "post": {
        "tags": ["viewFilterGroup"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewFilterGroup.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewFilterGroup"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewFilterGroup for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewSort Created": {
      "post": {
        "tags": ["viewSort"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewSort.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewSort"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewSort for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewSort Updated": {
      "post": {
        "tags": ["viewSort"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewSort.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewSort"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewSort for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "ViewSort Deleted": {
      "post": {
        "tags": ["viewSort"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "viewSort.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["viewSort"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/ViewSort for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "View Created": {
      "post": {
        "tags": ["view"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "view.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["view"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/View for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "View Updated": {
      "post": {
        "tags": ["view"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "view.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["view"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/View for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "View Deleted": {
      "post": {
        "tags": ["view"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "view.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["view"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/View for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Webhook Created": {
      "post": {
        "tags": ["webhook"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "webhook.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["webhook"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Webhook for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Webhook Updated": {
      "post": {
        "tags": ["webhook"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "webhook.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["webhook"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Webhook for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Webhook Deleted": {
      "post": {
        "tags": ["webhook"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "webhook.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["webhook"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Webhook for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Workflow Created": {
      "post": {
        "tags": ["workflow"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflow.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflow"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Workflow for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Workflow Updated": {
      "post": {
        "tags": ["workflow"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflow.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflow"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Workflow for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Workflow Deleted": {
      "post": {
        "tags": ["workflow"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflow.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflow"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Workflow for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowEventListener Created": {
      "post": {
        "tags": ["workflowEventListener"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowEventListener.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowEventListener"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowEventListener for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowEventListener Updated": {
      "post": {
        "tags": ["workflowEventListener"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowEventListener.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowEventListener"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowEventListener for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowEventListener Deleted": {
      "post": {
        "tags": ["workflowEventListener"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowEventListener.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowEventListener"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowEventListener for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowVersion Created": {
      "post": {
        "tags": ["workflowVersion"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowVersion.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowVersion"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowVersion Updated": {
      "post": {
        "tags": ["workflowVersion"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowVersion.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowVersion"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowVersion for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowVersion Deleted": {
      "post": {
        "tags": ["workflowVersion"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowVersion.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowVersion"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowVersion for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowRun Created": {
      "post": {
        "tags": ["workflowRun"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowRun.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowRun"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowRun for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowRun Updated": {
      "post": {
        "tags": ["workflowRun"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowRun.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowRun"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowRun for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowRun Deleted": {
      "post": {
        "tags": ["workflowRun"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowRun.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowRun"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowRun for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowAutomatedTrigger Created": {
      "post": {
        "tags": ["workflowAutomatedTrigger"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowAutomatedTrigger.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowAutomatedTrigger"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowAutomatedTrigger Updated": {
      "post": {
        "tags": ["workflowAutomatedTrigger"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowAutomatedTrigger.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowAutomatedTrigger"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkflowAutomatedTrigger Deleted": {
      "post": {
        "tags": ["workflowAutomatedTrigger"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workflowAutomatedTrigger.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workflowAutomatedTrigger"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkspaceMember Created": {
      "post": {
        "tags": ["workspaceMember"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workspaceMember.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workspaceMember"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkspaceMember Updated": {
      "post": {
        "tags": ["workspaceMember"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workspaceMember.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workspaceMember"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkspaceMember for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "WorkspaceMember Deleted": {
      "post": {
        "tags": ["workspaceMember"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "workspaceMember.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["workspaceMember"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/WorkspaceMember for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageThread Created": {
      "post": {
        "tags": ["messageThread"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageThread.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageThread"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageThread for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageThread Updated": {
      "post": {
        "tags": ["messageThread"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageThread.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageThread"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageThread for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageThread Deleted": {
      "post": {
        "tags": ["messageThread"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageThread.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageThread"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageThread for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Message Created": {
      "post": {
        "tags": ["message"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "message.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["message"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Message for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Message Updated": {
      "post": {
        "tags": ["message"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "message.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["message"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Message for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Message Deleted": {
      "post": {
        "tags": ["message"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "message.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["message"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Message for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageChannel Created": {
      "post": {
        "tags": ["messageChannel"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageChannel.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageChannel"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageChannel for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageChannel Updated": {
      "post": {
        "tags": ["messageChannel"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageChannel.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageChannel"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageChannel for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageChannel Deleted": {
      "post": {
        "tags": ["messageChannel"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageChannel.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageChannel"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageChannel for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageParticipant Created": {
      "post": {
        "tags": ["messageParticipant"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageParticipant.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageParticipant"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageParticipant Updated": {
      "post": {
        "tags": ["messageParticipant"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageParticipant.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageParticipant"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageParticipant for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageParticipant Deleted": {
      "post": {
        "tags": ["messageParticipant"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageParticipant.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageParticipant"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageParticipant for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageFolder Created": {
      "post": {
        "tags": ["messageFolder"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageFolder.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageFolder"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageFolder for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageFolder Updated": {
      "post": {
        "tags": ["messageFolder"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageFolder.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageFolder"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageFolder for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageFolder Deleted": {
      "post": {
        "tags": ["messageFolder"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageFolder.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageFolder"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageFolder for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageChannelMessageAssociation Created": {
      "post": {
        "tags": ["messageChannelMessageAssociation"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageChannelMessageAssociation.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageChannelMessageAssociation"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageChannelMessageAssociation Updated": {
      "post": {
        "tags": ["messageChannelMessageAssociation"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageChannelMessageAssociation.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageChannelMessageAssociation"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "MessageChannelMessageAssociation Deleted": {
      "post": {
        "tags": ["messageChannelMessageAssociation"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "messageChannelMessageAssociation.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["messageChannelMessageAssociation"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/MessageChannelMessageAssociation for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Note Created": {
      "post": {
        "tags": ["note"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "note.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["note"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Note for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Note Updated": {
      "post": {
        "tags": ["note"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "note.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["note"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Note for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Note Deleted": {
      "post": {
        "tags": ["note"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "note.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["note"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Note for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "NoteTarget Created": {
      "post": {
        "tags": ["noteTarget"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "noteTarget.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["noteTarget"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/NoteTarget for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "NoteTarget Updated": {
      "post": {
        "tags": ["noteTarget"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "noteTarget.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["noteTarget"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/NoteTarget for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "NoteTarget Deleted": {
      "post": {
        "tags": ["noteTarget"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "noteTarget.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["noteTarget"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/NoteTarget for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Opportunity Created": {
      "post": {
        "tags": ["opportunity"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "opportunity.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["opportunity"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Opportunity for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Opportunity Updated": {
      "post": {
        "tags": ["opportunity"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "opportunity.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["opportunity"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Opportunity for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Opportunity Deleted": {
      "post": {
        "tags": ["opportunity"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "opportunity.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["opportunity"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Opportunity for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Person Created": {
      "post": {
        "tags": ["person"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "person.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["person"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Person for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Person Updated": {
      "post": {
        "tags": ["person"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "person.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["person"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Person for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Person Deleted": {
      "post": {
        "tags": ["person"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "person.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["person"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Person for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Task Created": {
      "post": {
        "tags": ["task"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "task.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["task"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Task for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Task Updated": {
      "post": {
        "tags": ["task"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "task.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["task"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Task for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Task Deleted": {
      "post": {
        "tags": ["task"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "task.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["task"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Task for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "TaskTarget Created": {
      "post": {
        "tags": ["taskTarget"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "taskTarget.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["taskTarget"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/TaskTarget for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "TaskTarget Updated": {
      "post": {
        "tags": ["taskTarget"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "taskTarget.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["taskTarget"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/TaskTarget for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "TaskTarget Deleted": {
      "post": {
        "tags": ["taskTarget"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "taskTarget.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["taskTarget"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/TaskTarget for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Pet Created": {
      "post": {
        "tags": ["pet"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "pet.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["pet"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Pet for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Pet Updated": {
      "post": {
        "tags": ["pet"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "pet.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["pet"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Pet for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "Pet Deleted": {
      "post": {
        "tags": ["pet"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "pet.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["pet"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/Pet for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "SurveyResult Created": {
      "post": {
        "tags": ["surveyResult"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "surveyResult.created" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["surveyResult"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/SurveyResult for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "SurveyResult Updated": {
      "post": {
        "tags": ["surveyResult"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "surveyResult.updated" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["surveyResult"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/SurveyResult for Response" },
                  "updatedFields": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    },
    "SurveyResult Deleted": {
      "post": {
        "tags": ["surveyResult"],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": { "type": "string" },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": { "type": "string" },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": { "type": "string" },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": { "type": "string", "example": "https://example.com/incomingWebhook" },
                  "eventName": { "type": "string", "example": "surveyResult.deleted" },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
                      "nameSingular": { "type": "string", "enum": ["surveyResult"] }
                    }
                  },
                  "workspaceId": { "type": "string", "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9" },
                  "webhookId": { "type": "string", "example": "90056586-1228-4e03-a507-70140aa85c05" },
                  "eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
                  "record": { "$ref": "#/components/schemas/SurveyResult for Response" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Return a 200 status to indicate that the data was received successfully" }
        }
      }
    }
  },
  "tags": [
    { "name": "General", "description": "General requests" },
    { "name": "apiKeys", "description": "Object `ApiKeys`" },
    { "name": "attachments", "description": "Object `Attachments`" },
    { "name": "blocklists", "description": "Object `Blocklists`" },
    { "name": "calendarEvents", "description": "Object `CalendarEvents`" },
    { "name": "calendarChannels", "description": "Object `CalendarChannels`" },
    { "name": "calendarChannelEventAssociations", "description": "Object `CalendarChannelEventAssociations`" },
    { "name": "calendarEventParticipants", "description": "Object `CalendarEventParticipants`" },
    { "name": "companies", "description": "Object `Companies`" },
    { "name": "connectedAccounts", "description": "Object `ConnectedAccounts`" },
    { "name": "favorites", "description": "Object `Favorites`" },
    { "name": "favoriteFolders", "description": "Object `FavoriteFolders`" },
    { "name": "timelineActivities", "description": "Object `TimelineActivities`" },
    { "name": "viewFields", "description": "Object `ViewFields`" },
    { "name": "viewGroups", "description": "Object `ViewGroups`" },
    { "name": "viewFilters", "description": "Object `ViewFilters`" },
    { "name": "viewFilterGroups", "description": "Object `ViewFilterGroups`" },
    { "name": "viewSorts", "description": "Object `ViewSorts`" },
    { "name": "views", "description": "Object `Views`" },
    { "name": "webhooks", "description": "Object `Webhooks`" },
    { "name": "workflows", "description": "Object `Workflows`" },
    { "name": "workflowEventListeners", "description": "Object `WorkflowEventListeners`" },
    { "name": "workflowVersions", "description": "Object `WorkflowVersions`" },
    { "name": "workflowRuns", "description": "Object `WorkflowRuns`" },
    { "name": "workflowAutomatedTriggers", "description": "Object `WorkflowAutomatedTriggers`" },
    { "name": "workspaceMembers", "description": "Object `WorkspaceMembers`" },
    { "name": "messageThreads", "description": "Object `MessageThreads`" },
    { "name": "messages", "description": "Object `Messages`" },
    { "name": "messageChannels", "description": "Object `MessageChannels`" },
    { "name": "messageParticipants", "description": "Object `MessageParticipants`" },
    { "name": "messageFolders", "description": "Object `MessageFolders`" },
    { "name": "messageChannelMessageAssociations", "description": "Object `MessageChannelMessageAssociations`" },
    { "name": "notes", "description": "Object `Notes`" },
    { "name": "noteTargets", "description": "Object `NoteTargets`" },
    { "name": "opportunities", "description": "Object `Opportunities`" },
    { "name": "people", "description": "Object `People`" },
    { "name": "tasks", "description": "Object `Tasks`" },
    { "name": "taskTargets", "description": "Object `TaskTargets`" },
    { "name": "pets", "description": "Object `Pets`" },
    { "name": "surveyResults", "description": "Object `SurveyResults`" }
  ]
}
